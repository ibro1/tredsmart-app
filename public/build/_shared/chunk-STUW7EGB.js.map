{
  "version": 3,
  "sources": ["../../../app/components/shared/icon-post-status.tsx", "../../../app/components/shared/badge-post-status.tsx", "../../../app/components/shared/form-update-status.tsx", "../../../node_modules/.pnpm/@radix-ui+number@1.0.1/node_modules/@radix-ui/number/dist/packages/core/number/src/index.ts", "../../../node_modules/.pnpm/@radix-ui+number@1.0.1/node_modules/@radix-ui/number/dist/packages/core/number/src/number.ts", "../../../node_modules/.pnpm/@radix-ui+react-use-previous@1.0.1_@types+react@18.2.47_react@18.2.0/node_modules/@radix-ui/react-use-previous/dist/packages/react/use-previous/src/index.ts", "../../../node_modules/.pnpm/@radix-ui+react-use-previous@1.0.1_@types+react@18.2.47_react@18.2.0/node_modules/@radix-ui/react-use-previous/dist/packages/react/use-previous/src/usePrevious.tsx", "../../../node_modules/.pnpm/@radix-ui+react-visually-hidden@1.0.3_@types+react-dom@18.2.18_@types+react@18.2.47_react-dom_ovrxoxyhzkj2crns274dt56a54/node_modules/@radix-ui/react-visually-hidden/dist/packages/react/visually-hidden/src/index.ts", "../../../node_modules/.pnpm/@radix-ui+react-visually-hidden@1.0.3_@types+react-dom@18.2.18_@types+react@18.2.47_react-dom_ovrxoxyhzkj2crns274dt56a54/node_modules/@radix-ui/react-visually-hidden/dist/packages/react/visually-hidden/src/VisuallyHidden.tsx", "../../../node_modules/.pnpm/@radix-ui+react-select@2.0.0_@types+react-dom@18.2.18_@types+react@18.2.47_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/@radix-ui/react-select/dist/packages/react/select/src/index.ts", "../../../node_modules/.pnpm/@radix-ui+react-select@2.0.0_@types+react-dom@18.2.18_@types+react@18.2.47_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/@radix-ui/react-select/dist/packages/react/select/src/Select.tsx", "../../../app/components/ui/select.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/shared/icon-post-status.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/shared/icon-post-status.tsx\");\n  import.meta.hot.lastModified = \"1738409028320.369\";\n}\n// REMIX HMR END\n\nimport { IconMatch } from \"~/components/libs/icon\";\nexport function IconPostStatus({\n  status\n}) {\n  return <IconMatch icon={status.symbol} className=\"inline\" />;\n}\n_c = IconPostStatus;\nvar _c;\n$RefreshReg$(_c, \"IconPostStatus\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/shared/badge-post-status.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/shared/badge-post-status.tsx\");\n  import.meta.hot.lastModified = \"1738409028320.369\";\n}\n// REMIX HMR END\n\nimport { IconPostStatus } from \"~/components/shared/icon-post-status\";\nimport { Badge } from \"~/components/ui/badge\";\nimport { cn } from \"~/utils/cn\";\nexport function BadgePostStatus({\n  status,\n  className\n}) {\n  return <Badge variant=\"secondary\" className={cn(\"inline-flex items-center gap-1\", className)}>\n      <IconPostStatus status={status} />\n      <span>{status.name}</span>\n    </Badge>;\n}\n_c = BadgePostStatus;\nvar _c;\n$RefreshReg$(_c, \"BadgePostStatus\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/shared/form-update-status.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/shared/form-update-status.tsx\");\n  import.meta.hot.lastModified = \"1738409028320.369\";\n}\n// REMIX HMR END\n\nimport { useFetcher } from \"@remix-run/react\";\nimport { useState } from \"react\";\nimport { BadgePostStatus } from \"~/components/shared/badge-post-status\";\nimport { IconPostStatus } from \"~/components/shared/icon-post-status\";\nimport { AlertDialog, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"~/components/ui/alert-dialog\";\nimport { ButtonLoading } from \"~/components/ui/button-loading\";\nimport { Select, SelectContent, SelectGroup, SelectItem, SelectTrigger, SelectValue } from \"~/components/ui/select\";\nimport { cn } from \"~/utils/cn\";\nexport function FormUpdateStatus({\n  itemId = \"itemId\",\n  action = \"/user/items/update\",\n  intentValue = \"update-item-status\",\n  dialogTitle = \"Update Status\",\n  dialogDescription = \"Update the status of this item\",\n  dialogAction = \"Update\",\n  item,\n  itemStatuses,\n  className\n}) {\n  _s();\n  const [open, setOpen] = useState();\n  const fetcher = useFetcher();\n  const isLoading = fetcher.state !== \"submitting\" && fetcher.formMethod === \"POST\";\n  if (!item) return null;\n  const statusSymbol = fetcher.formData ? fetcher.formData.get(\"statusSymbol\") : item.status.symbol;\n  const hasItemStatuses = Array.isArray(itemStatuses);\n  if (!hasItemStatuses) return null;\n  const statusOptimistic = itemStatuses.find(status => status.symbol === statusSymbol) || item.status;\n  return <AlertDialog open={open} onOpenChange={setOpen}>\n      <AlertDialogTrigger className={cn(\"focus-ring rounded-full\", className)}>\n        <BadgePostStatus status={statusOptimistic} className=\"cursor-pointer\" />\n      </AlertDialogTrigger>\n\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>{dialogTitle}</AlertDialogTitle>\n          <AlertDialogDescription>{dialogDescription}</AlertDialogDescription>\n        </AlertDialogHeader>\n\n        <fetcher.Form method=\"PATCH\" action={action} onSubmit={event => {\n        fetcher.submit(event.currentTarget.form, {\n          method: \"POST\"\n        });\n        setOpen(false);\n      }} className=\"space-y-2\">\n          <div>\n            <input type=\"hidden\" name={itemId} defaultValue={item.id} />\n\n            <Select name=\"statusSymbol\" defaultValue={item.status.symbol}>\n              <SelectTrigger className=\"w-[180px]\">\n                <SelectValue placeholder=\"Select a status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectGroup>\n                  {itemStatuses.map(status => {\n                  return <SelectItem key={status.id} value={status.symbol}>\n                        <p className=\"inline-flex items-center gap-2\">\n                          <IconPostStatus status={status} />\n                          <span>{status.name}</span>\n                        </p>\n                      </SelectItem>;\n                })}\n                </SelectGroup>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <ul className=\"space-y-1\">\n              {itemStatuses.map(status => {\n              return <li key={status.id}>\n                    <p className=\"text-xs text-muted-foreground\">\n                      <IconPostStatus status={status} />\n                      <span className=\"font-semibold\"> {status.name}:</span>\n                      <span> {status.description}</span>\n                    </p>\n                  </li>;\n            })}\n            </ul>\n          </div>\n\n          <AlertDialogFooter>\n            <AlertDialogCancel type=\"button\">Cancel</AlertDialogCancel>\n\n            <ButtonLoading type=\"submit\" size=\"sm\" loadingText=\"Updating...\" name=\"intent\" value={intentValue} isLoading={isLoading}>\n              {dialogAction}\n            </ButtonLoading>\n          </AlertDialogFooter>\n        </fetcher.Form>\n      </AlertDialogContent>\n    </AlertDialog>;\n}\n_s(FormUpdateStatus, \"jJbL+SpDT5WPjjx4u9vZJiD55h4=\", false, function () {\n  return [useFetcher];\n});\n_c = FormUpdateStatus;\nvar _c;\n$RefreshReg$(_c, \"FormUpdateStatus\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "export { clamp } from './number';\n", "function clamp(value: number, [min, max]: [number, number]): number {\n  return Math.min(max, Math.max(min, value));\n}\n\nexport { clamp };\n", "export { usePrevious } from './usePrevious';\n", "import * as React from 'react';\n\nfunction usePrevious<T>(value: T) {\n  const ref = React.useRef({ value, previous: value });\n\n  // We compare values before making an update to ensure that\n  // a change has been made. This ensures the previous value is\n  // persisted correctly between renders.\n  return React.useMemo(() => {\n    if (ref.current.value !== value) {\n      ref.current.previous = ref.current.value;\n      ref.current.value = value;\n    }\n    return ref.current.previous;\n  }, [value]);\n}\n\nexport { usePrevious };\n", "export {\n  VisuallyHidden,\n  //\n  Root,\n} from './VisuallyHidden';\nexport type { VisuallyHiddenProps } from './VisuallyHidden';\n", "import * as React from 'react';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * VisuallyHidden\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAME = 'VisuallyHidden';\n\ntype VisuallyHiddenElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = Radix.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface VisuallyHiddenProps extends PrimitiveSpanProps {}\n\nconst VisuallyHidden = React.forwardRef<VisuallyHiddenElement, VisuallyHiddenProps>(\n  (props, forwardedRef) => {\n    return (\n      <Primitive.span\n        {...props}\n        ref={forwardedRef}\n        style={{\n          // See: https://github.com/twbs/bootstrap/blob/master/scss/mixins/_screen-reader.scss\n          position: 'absolute',\n          border: 0,\n          width: 1,\n          height: 1,\n          padding: 0,\n          margin: -1,\n          overflow: 'hidden',\n          clip: 'rect(0, 0, 0, 0)',\n          whiteSpace: 'nowrap',\n          wordWrap: 'normal',\n          ...props.style,\n        }}\n      />\n    );\n  }\n);\n\nVisuallyHidden.displayName = NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = VisuallyHidden;\n\nexport {\n  VisuallyHidden,\n  //\n  Root,\n};\nexport type { VisuallyHiddenProps };\n", "export {\n  createSelectScope,\n  //\n  Select,\n  SelectTrigger,\n  SelectValue,\n  SelectIcon,\n  SelectPortal,\n  SelectContent,\n  SelectViewport,\n  SelectGroup,\n  SelectLabel,\n  SelectItem,\n  SelectItemText,\n  SelectItemIndicator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n  SelectSeparator,\n  SelectArrow,\n  //\n  Root,\n  Trigger,\n  Value,\n  Icon,\n  Portal,\n  Content,\n  Viewport,\n  Group,\n  Label,\n  Item,\n  ItemText,\n  ItemIndicator,\n  ScrollUpButton,\n  ScrollDownButton,\n  Separator,\n  Arrow,\n} from './Select';\nexport type {\n  SelectProps,\n  SelectTriggerProps,\n  SelectValueProps,\n  SelectIconProps,\n  SelectPortalProps,\n  SelectContentProps,\n  SelectViewportProps,\n  SelectGroupProps,\n  SelectLabelProps,\n  SelectItemProps,\n  SelectItemTextProps,\n  SelectItemIndicatorProps,\n  SelectScrollUpButtonProps,\n  SelectScrollDownButtonProps,\n  SelectSeparatorProps,\n  SelectArrowProps,\n} from './Select';\n", "import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { clamp } from '@radix-ui/number';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { useId } from '@radix-ui/react-id';\nimport * as PopperPrimitive from '@radix-ui/react-popper';\nimport { createPopperScope } from '@radix-ui/react-popper';\nimport { Portal as PortalPrimitive } from '@radix-ui/react-portal';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Slot } from '@radix-ui/react-slot';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { VisuallyHidden } from '@radix-ui/react-visually-hidden';\nimport { hideOthers } from 'aria-hidden';\nimport { RemoveScroll } from 'react-remove-scroll';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Direction = 'ltr' | 'rtl';\n\nconst OPEN_KEYS = [' ', 'Enter', 'ArrowUp', 'ArrowDown'];\nconst SELECTION_KEYS = [' ', 'Enter'];\n\n/* -------------------------------------------------------------------------------------------------\n * Select\n * -----------------------------------------------------------------------------------------------*/\n\nconst SELECT_NAME = 'Select';\n\ntype ItemData = { value: string; disabled: boolean; textValue: string };\nconst [Collection, useCollection, createCollectionScope] = createCollection<\n  SelectItemElement,\n  ItemData\n>(SELECT_NAME);\n\ntype ScopedProps<P> = P & { __scopeSelect?: Scope };\nconst [createSelectContext, createSelectScope] = createContextScope(SELECT_NAME, [\n  createCollectionScope,\n  createPopperScope,\n]);\nconst usePopperScope = createPopperScope();\n\ntype SelectContextValue = {\n  trigger: SelectTriggerElement | null;\n  onTriggerChange(node: SelectTriggerElement | null): void;\n  valueNode: SelectValueElement | null;\n  onValueNodeChange(node: SelectValueElement): void;\n  valueNodeHasChildren: boolean;\n  onValueNodeHasChildrenChange(hasChildren: boolean): void;\n  contentId: string;\n  value?: string;\n  onValueChange(value: string): void;\n  open: boolean;\n  required?: boolean;\n  onOpenChange(open: boolean): void;\n  dir: SelectProps['dir'];\n  triggerPointerDownPosRef: React.MutableRefObject<{ x: number; y: number } | null>;\n  disabled?: boolean;\n};\n\nconst [SelectProvider, useSelectContext] = createSelectContext<SelectContextValue>(SELECT_NAME);\n\ntype NativeOption = React.ReactElement<React.ComponentProps<'option'>>;\n\ntype SelectNativeOptionsContextValue = {\n  onNativeOptionAdd(option: NativeOption): void;\n  onNativeOptionRemove(option: NativeOption): void;\n};\nconst [SelectNativeOptionsProvider, useSelectNativeOptionsContext] =\n  createSelectContext<SelectNativeOptionsContextValue>(SELECT_NAME);\n\ninterface SelectProps {\n  children?: React.ReactNode;\n  value?: string;\n  defaultValue?: string;\n  onValueChange?(value: string): void;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  dir?: Direction;\n  name?: string;\n  autoComplete?: string;\n  disabled?: boolean;\n  required?: boolean;\n}\n\nconst Select: React.FC<SelectProps> = (props: ScopedProps<SelectProps>) => {\n  const {\n    __scopeSelect,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    value: valueProp,\n    defaultValue,\n    onValueChange,\n    dir,\n    name,\n    autoComplete,\n    disabled,\n    required,\n  } = props;\n  const popperScope = usePopperScope(__scopeSelect);\n  const [trigger, setTrigger] = React.useState<SelectTriggerElement | null>(null);\n  const [valueNode, setValueNode] = React.useState<SelectValueElement | null>(null);\n  const [valueNodeHasChildren, setValueNodeHasChildren] = React.useState(false);\n  const direction = useDirection(dir);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n  const triggerPointerDownPosRef = React.useRef<{ x: number; y: number } | null>(null);\n\n  // We set this to true by default so that events bubble to forms without JS (SSR)\n  const isFormControl = trigger ? Boolean(trigger.closest('form')) : true;\n  const [nativeOptionsSet, setNativeOptionsSet] = React.useState(new Set<NativeOption>());\n\n  // The native `select` only associates the correct default value if the corresponding\n  // `option` is rendered as a child **at the same time** as itself.\n  // Because it might take a few renders for our items to gather the information to build\n  // the native `option`(s), we generate a key on the `select` to make sure React re-builds it\n  // each time the options change.\n  const nativeSelectKey = Array.from(nativeOptionsSet)\n    .map((option) => option.props.value)\n    .join(';');\n\n  return (\n    <PopperPrimitive.Root {...popperScope}>\n      <SelectProvider\n        required={required}\n        scope={__scopeSelect}\n        trigger={trigger}\n        onTriggerChange={setTrigger}\n        valueNode={valueNode}\n        onValueNodeChange={setValueNode}\n        valueNodeHasChildren={valueNodeHasChildren}\n        onValueNodeHasChildrenChange={setValueNodeHasChildren}\n        contentId={useId()}\n        value={value}\n        onValueChange={setValue}\n        open={open}\n        onOpenChange={setOpen}\n        dir={direction}\n        triggerPointerDownPosRef={triggerPointerDownPosRef}\n        disabled={disabled}\n      >\n        <Collection.Provider scope={__scopeSelect}>\n          <SelectNativeOptionsProvider\n            scope={props.__scopeSelect}\n            onNativeOptionAdd={React.useCallback((option) => {\n              setNativeOptionsSet((prev) => new Set(prev).add(option));\n            }, [])}\n            onNativeOptionRemove={React.useCallback((option) => {\n              setNativeOptionsSet((prev) => {\n                const optionsSet = new Set(prev);\n                optionsSet.delete(option);\n                return optionsSet;\n              });\n            }, [])}\n          >\n            {children}\n          </SelectNativeOptionsProvider>\n        </Collection.Provider>\n\n        {isFormControl ? (\n          <BubbleSelect\n            key={nativeSelectKey}\n            aria-hidden\n            required={required}\n            tabIndex={-1}\n            name={name}\n            autoComplete={autoComplete}\n            value={value}\n            // enable form autofill\n            onChange={(event) => setValue(event.target.value)}\n            disabled={disabled}\n          >\n            {value === undefined ? <option value=\"\" /> : null}\n            {Array.from(nativeOptionsSet)}\n          </BubbleSelect>\n        ) : null}\n      </SelectProvider>\n    </PopperPrimitive.Root>\n  );\n};\n\nSelect.displayName = SELECT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'SelectTrigger';\n\ntype SelectTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface SelectTriggerProps extends PrimitiveButtonProps {}\n\nconst SelectTrigger = React.forwardRef<SelectTriggerElement, SelectTriggerProps>(\n  (props: ScopedProps<SelectTriggerProps>, forwardedRef) => {\n    const { __scopeSelect, disabled = false, ...triggerProps } = props;\n    const popperScope = usePopperScope(__scopeSelect);\n    const context = useSelectContext(TRIGGER_NAME, __scopeSelect);\n    const isDisabled = context.disabled || disabled;\n    const composedRefs = useComposedRefs(forwardedRef, context.onTriggerChange);\n    const getItems = useCollection(__scopeSelect);\n\n    const [searchRef, handleTypeaheadSearch, resetTypeahead] = useTypeaheadSearch((search) => {\n      const enabledItems = getItems().filter((item) => !item.disabled);\n      const currentItem = enabledItems.find((item) => item.value === context.value);\n      const nextItem = findNextItem(enabledItems, search, currentItem);\n      if (nextItem !== undefined) {\n        context.onValueChange(nextItem.value);\n      }\n    });\n\n    const handleOpen = () => {\n      if (!isDisabled) {\n        context.onOpenChange(true);\n        // reset typeahead when we open\n        resetTypeahead();\n      }\n    };\n\n    return (\n      <PopperPrimitive.Anchor asChild {...popperScope}>\n        <Primitive.button\n          type=\"button\"\n          role=\"combobox\"\n          aria-controls={context.contentId}\n          aria-expanded={context.open}\n          aria-required={context.required}\n          aria-autocomplete=\"none\"\n          dir={context.dir}\n          data-state={context.open ? 'open' : 'closed'}\n          disabled={isDisabled}\n          data-disabled={isDisabled ? '' : undefined}\n          data-placeholder={shouldShowPlaceholder(context.value) ? '' : undefined}\n          {...triggerProps}\n          ref={composedRefs}\n          // Enable compatibility with native label or custom `Label` \"click\" for Safari:\n          onClick={composeEventHandlers(triggerProps.onClick, (event) => {\n            // Whilst browsers generally have no issue focusing the trigger when clicking\n            // on a label, Safari seems to struggle with the fact that there's no `onClick`.\n            // We force `focus` in this case. Note: this doesn't create any other side-effect\n            // because we are preventing default in `onPointerDown` so effectively\n            // this only runs for a label \"click\"\n            event.currentTarget.focus();\n          })}\n          onPointerDown={composeEventHandlers(triggerProps.onPointerDown, (event) => {\n            // prevent implicit pointer capture\n            // https://www.w3.org/TR/pointerevents3/#implicit-pointer-capture\n            const target = event.target as HTMLElement;\n            if (target.hasPointerCapture(event.pointerId)) {\n              target.releasePointerCapture(event.pointerId);\n            }\n\n            // only call handler if it's the left button (mousedown gets triggered by all mouse buttons)\n            // but not when the control key is pressed (avoiding MacOS right click)\n            if (event.button === 0 && event.ctrlKey === false) {\n              handleOpen();\n              context.triggerPointerDownPosRef.current = {\n                x: Math.round(event.pageX),\n                y: Math.round(event.pageY),\n              };\n              // prevent trigger from stealing focus from the active item after opening.\n              event.preventDefault();\n            }\n          })}\n          onKeyDown={composeEventHandlers(triggerProps.onKeyDown, (event) => {\n            const isTypingAhead = searchRef.current !== '';\n            const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n            if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);\n            if (isTypingAhead && event.key === ' ') return;\n            if (OPEN_KEYS.includes(event.key)) {\n              handleOpen();\n              event.preventDefault();\n            }\n          })}\n        />\n      </PopperPrimitive.Anchor>\n    );\n  }\n);\n\nSelectTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectValue\n * -----------------------------------------------------------------------------------------------*/\n\nconst VALUE_NAME = 'SelectValue';\n\ntype SelectValueElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = Radix.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface SelectValueProps extends Omit<PrimitiveSpanProps, 'placeholder'> {\n  placeholder?: React.ReactNode;\n}\n\nconst SelectValue = React.forwardRef<SelectValueElement, SelectValueProps>(\n  (props: ScopedProps<SelectValueProps>, forwardedRef) => {\n    // We ignore `className` and `style` as this part shouldn't be styled.\n    const { __scopeSelect, className, style, children, placeholder = '', ...valueProps } = props;\n    const context = useSelectContext(VALUE_NAME, __scopeSelect);\n    const { onValueNodeHasChildrenChange } = context;\n    const hasChildren = children !== undefined;\n    const composedRefs = useComposedRefs(forwardedRef, context.onValueNodeChange);\n\n    useLayoutEffect(() => {\n      onValueNodeHasChildrenChange(hasChildren);\n    }, [onValueNodeHasChildrenChange, hasChildren]);\n\n    return (\n      <Primitive.span\n        {...valueProps}\n        ref={composedRefs}\n        // we don't want events from the portalled `SelectValue` children to bubble\n        // through the item they came from\n        style={{ pointerEvents: 'none' }}\n      >\n        {shouldShowPlaceholder(context.value) ? <>{placeholder}</> : children}\n      </Primitive.span>\n    );\n  }\n);\n\nSelectValue.displayName = VALUE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectIcon\n * -----------------------------------------------------------------------------------------------*/\n\nconst ICON_NAME = 'SelectIcon';\n\ntype SelectIconElement = React.ElementRef<typeof Primitive.span>;\ninterface SelectIconProps extends PrimitiveSpanProps {}\n\nconst SelectIcon = React.forwardRef<SelectIconElement, SelectIconProps>(\n  (props: ScopedProps<SelectIconProps>, forwardedRef) => {\n    const { __scopeSelect, children, ...iconProps } = props;\n    return (\n      <Primitive.span aria-hidden {...iconProps} ref={forwardedRef}>\n        {children || '▼'}\n      </Primitive.span>\n    );\n  }\n);\n\nSelectIcon.displayName = ICON_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'SelectPortal';\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof PortalPrimitive>;\ninterface SelectPortalProps {\n  children?: React.ReactNode;\n  /**\n   * Specify a container element to portal the content into.\n   */\n  container?: PortalProps['container'];\n}\n\nconst SelectPortal: React.FC<SelectPortalProps> = (props: ScopedProps<SelectPortalProps>) => {\n  return <PortalPrimitive asChild {...props} />;\n};\n\nSelectPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'SelectContent';\n\ntype SelectContentElement = SelectContentImplElement;\ninterface SelectContentProps extends SelectContentImplProps {}\n\nconst SelectContent = React.forwardRef<SelectContentElement, SelectContentProps>(\n  (props: ScopedProps<SelectContentProps>, forwardedRef) => {\n    const context = useSelectContext(CONTENT_NAME, props.__scopeSelect);\n    const [fragment, setFragment] = React.useState<DocumentFragment>();\n\n    // setting the fragment in `useLayoutEffect` as `DocumentFragment` doesn't exist on the server\n    useLayoutEffect(() => {\n      setFragment(new DocumentFragment());\n    }, []);\n\n    if (!context.open) {\n      const frag = fragment as Element | undefined;\n      return frag\n        ? ReactDOM.createPortal(\n            <SelectContentProvider scope={props.__scopeSelect}>\n              <Collection.Slot scope={props.__scopeSelect}>\n                <div>{props.children}</div>\n              </Collection.Slot>\n            </SelectContentProvider>,\n            frag\n          )\n        : null;\n    }\n\n    return <SelectContentImpl {...props} ref={forwardedRef} />;\n  }\n);\n\nSelectContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectContentImpl\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_MARGIN = 10;\n\ntype SelectContentContextValue = {\n  content?: SelectContentElement | null;\n  viewport?: SelectViewportElement | null;\n  onViewportChange?: (node: SelectViewportElement | null) => void;\n  itemRefCallback?: (node: SelectItemElement | null, value: string, disabled: boolean) => void;\n  selectedItem?: SelectItemElement | null;\n  onItemLeave?: () => void;\n  itemTextRefCallback?: (\n    node: SelectItemTextElement | null,\n    value: string,\n    disabled: boolean\n  ) => void;\n  focusSelectedItem?: () => void;\n  selectedItemText?: SelectItemTextElement | null;\n  position?: SelectContentProps['position'];\n  isPositioned?: boolean;\n  searchRef?: React.RefObject<string>;\n};\n\nconst [SelectContentProvider, useSelectContentContext] =\n  createSelectContext<SelectContentContextValue>(CONTENT_NAME);\n\nconst CONTENT_IMPL_NAME = 'SelectContentImpl';\n\ntype SelectContentImplElement = SelectPopperPositionElement | SelectItemAlignedPositionElement;\ntype DismissableLayerProps = React.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype FocusScopeProps = Radix.ComponentPropsWithoutRef<typeof FocusScope>;\n\ntype SelectPopperPrivateProps = { onPlaced?: PopperContentProps['onPlaced'] };\n\ninterface SelectContentImplProps\n  extends Omit<SelectPopperPositionProps, keyof SelectPopperPrivateProps>,\n    Omit<SelectItemAlignedPositionProps, keyof SelectPopperPrivateProps> {\n  /**\n   * Event handler called when auto-focusing on close.\n   * Can be prevented.\n   */\n  onCloseAutoFocus?: FocusScopeProps['onUnmountAutoFocus'];\n  /**\n   * Event handler called when the escape key is down.\n   * Can be prevented.\n   */\n  onEscapeKeyDown?: DismissableLayerProps['onEscapeKeyDown'];\n  /**\n   * Event handler called when the a `pointerdown` event happens outside of the `DismissableLayer`.\n   * Can be prevented.\n   */\n  onPointerDownOutside?: DismissableLayerProps['onPointerDownOutside'];\n\n  position?: 'item-aligned' | 'popper';\n}\n\nconst SelectContentImpl = React.forwardRef<SelectContentImplElement, SelectContentImplProps>(\n  (props: ScopedProps<SelectContentImplProps>, forwardedRef) => {\n    const {\n      __scopeSelect,\n      position = 'item-aligned',\n      onCloseAutoFocus,\n      onEscapeKeyDown,\n      onPointerDownOutside,\n      //\n      // PopperContent props\n      side,\n      sideOffset,\n      align,\n      alignOffset,\n      arrowPadding,\n      collisionBoundary,\n      collisionPadding,\n      sticky,\n      hideWhenDetached,\n      avoidCollisions,\n      //\n      ...contentProps\n    } = props;\n    const context = useSelectContext(CONTENT_NAME, __scopeSelect);\n    const [content, setContent] = React.useState<SelectContentImplElement | null>(null);\n    const [viewport, setViewport] = React.useState<SelectViewportElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));\n    const [selectedItem, setSelectedItem] = React.useState<SelectItemElement | null>(null);\n    const [selectedItemText, setSelectedItemText] = React.useState<SelectItemTextElement | null>(\n      null\n    );\n    const getItems = useCollection(__scopeSelect);\n    const [isPositioned, setIsPositioned] = React.useState(false);\n    const firstValidItemFoundRef = React.useRef(false);\n\n    // aria-hide everything except the content (better supported equivalent to setting aria-modal)\n    React.useEffect(() => {\n      if (content) return hideOthers(content);\n    }, [content]);\n\n    // Make sure the whole tree has focus guards as our `Select` may be\n    // the last element in the DOM (because of the `Portal`)\n    useFocusGuards();\n\n    const focusFirst = React.useCallback(\n      (candidates: Array<HTMLElement | null>) => {\n        const [firstItem, ...restItems] = getItems().map((item) => item.ref.current);\n        const [lastItem] = restItems.slice(-1);\n\n        const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;\n        for (const candidate of candidates) {\n          // if focus is already where we want to go, we don't want to keep going through the candidates\n          if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;\n          candidate?.scrollIntoView({ block: 'nearest' });\n          // viewport might have padding so scroll to its edges when focusing first/last items.\n          if (candidate === firstItem && viewport) viewport.scrollTop = 0;\n          if (candidate === lastItem && viewport) viewport.scrollTop = viewport.scrollHeight;\n          candidate?.focus();\n          if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;\n        }\n      },\n      [getItems, viewport]\n    );\n\n    const focusSelectedItem = React.useCallback(\n      () => focusFirst([selectedItem, content]),\n      [focusFirst, selectedItem, content]\n    );\n\n    // Since this is not dependent on layout, we want to ensure this runs at the same time as\n    // other effects across components. Hence why we don't call `focusSelectedItem` inside `position`.\n    React.useEffect(() => {\n      if (isPositioned) {\n        focusSelectedItem();\n      }\n    }, [isPositioned, focusSelectedItem]);\n\n    // prevent selecting items on `pointerup` in some cases after opening from `pointerdown`\n    // and close on `pointerup` outside.\n    const { onOpenChange, triggerPointerDownPosRef } = context;\n    React.useEffect(() => {\n      if (content) {\n        let pointerMoveDelta = { x: 0, y: 0 };\n\n        const handlePointerMove = (event: PointerEvent) => {\n          pointerMoveDelta = {\n            x: Math.abs(Math.round(event.pageX) - (triggerPointerDownPosRef.current?.x ?? 0)),\n            y: Math.abs(Math.round(event.pageY) - (triggerPointerDownPosRef.current?.y ?? 0)),\n          };\n        };\n        const handlePointerUp = (event: PointerEvent) => {\n          // If the pointer hasn't moved by a certain threshold then we prevent selecting item on `pointerup`.\n          if (pointerMoveDelta.x <= 10 && pointerMoveDelta.y <= 10) {\n            event.preventDefault();\n          } else {\n            // otherwise, if the event was outside the content, close.\n            if (!content.contains(event.target as HTMLElement)) {\n              onOpenChange(false);\n            }\n          }\n          document.removeEventListener('pointermove', handlePointerMove);\n          triggerPointerDownPosRef.current = null;\n        };\n\n        if (triggerPointerDownPosRef.current !== null) {\n          document.addEventListener('pointermove', handlePointerMove);\n          document.addEventListener('pointerup', handlePointerUp, { capture: true, once: true });\n        }\n\n        return () => {\n          document.removeEventListener('pointermove', handlePointerMove);\n          document.removeEventListener('pointerup', handlePointerUp, { capture: true });\n        };\n      }\n    }, [content, onOpenChange, triggerPointerDownPosRef]);\n\n    React.useEffect(() => {\n      const close = () => onOpenChange(false);\n      window.addEventListener('blur', close);\n      window.addEventListener('resize', close);\n      return () => {\n        window.removeEventListener('blur', close);\n        window.removeEventListener('resize', close);\n      };\n    }, [onOpenChange]);\n\n    const [searchRef, handleTypeaheadSearch] = useTypeaheadSearch((search) => {\n      const enabledItems = getItems().filter((item) => !item.disabled);\n      const currentItem = enabledItems.find((item) => item.ref.current === document.activeElement);\n      const nextItem = findNextItem(enabledItems, search, currentItem);\n      if (nextItem) {\n        /**\n         * Imperative focus during keydown is risky so we prevent React's batching updates\n         * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n         */\n        setTimeout(() => (nextItem.ref.current as HTMLElement).focus());\n      }\n    });\n\n    const itemRefCallback = React.useCallback(\n      (node: SelectItemElement | null, value: string, disabled: boolean) => {\n        const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;\n        const isSelectedItem = context.value !== undefined && context.value === value;\n        if (isSelectedItem || isFirstValidItem) {\n          setSelectedItem(node);\n          if (isFirstValidItem) firstValidItemFoundRef.current = true;\n        }\n      },\n      [context.value]\n    );\n    const handleItemLeave = React.useCallback(() => content?.focus(), [content]);\n    const itemTextRefCallback = React.useCallback(\n      (node: SelectItemTextElement | null, value: string, disabled: boolean) => {\n        const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;\n        const isSelectedItem = context.value !== undefined && context.value === value;\n        if (isSelectedItem || isFirstValidItem) {\n          setSelectedItemText(node);\n        }\n      },\n      [context.value]\n    );\n\n    const SelectPosition = position === 'popper' ? SelectPopperPosition : SelectItemAlignedPosition;\n\n    // Silently ignore props that are not supported by `SelectItemAlignedPosition`\n    const popperContentProps =\n      SelectPosition === SelectPopperPosition\n        ? {\n            side,\n            sideOffset,\n            align,\n            alignOffset,\n            arrowPadding,\n            collisionBoundary,\n            collisionPadding,\n            sticky,\n            hideWhenDetached,\n            avoidCollisions,\n          }\n        : {};\n\n    return (\n      <SelectContentProvider\n        scope={__scopeSelect}\n        content={content}\n        viewport={viewport}\n        onViewportChange={setViewport}\n        itemRefCallback={itemRefCallback}\n        selectedItem={selectedItem}\n        onItemLeave={handleItemLeave}\n        itemTextRefCallback={itemTextRefCallback}\n        focusSelectedItem={focusSelectedItem}\n        selectedItemText={selectedItemText}\n        position={position}\n        isPositioned={isPositioned}\n        searchRef={searchRef}\n      >\n        <RemoveScroll as={Slot} allowPinchZoom>\n          <FocusScope\n            asChild\n            // we make sure we're not trapping once it's been closed\n            // (closed !== unmounted when animating out)\n            trapped={context.open}\n            onMountAutoFocus={(event) => {\n              // we prevent open autofocus because we manually focus the selected item\n              event.preventDefault();\n            }}\n            onUnmountAutoFocus={composeEventHandlers(onCloseAutoFocus, (event) => {\n              context.trigger?.focus({ preventScroll: true });\n              event.preventDefault();\n            })}\n          >\n            <DismissableLayer\n              asChild\n              disableOutsidePointerEvents\n              onEscapeKeyDown={onEscapeKeyDown}\n              onPointerDownOutside={onPointerDownOutside}\n              // When focus is trapped, a focusout event may still happen.\n              // We make sure we don't trigger our `onDismiss` in such case.\n              onFocusOutside={(event) => event.preventDefault()}\n              onDismiss={() => context.onOpenChange(false)}\n            >\n              <SelectPosition\n                role=\"listbox\"\n                id={context.contentId}\n                data-state={context.open ? 'open' : 'closed'}\n                dir={context.dir}\n                onContextMenu={(event) => event.preventDefault()}\n                {...contentProps}\n                {...popperContentProps}\n                onPlaced={() => setIsPositioned(true)}\n                ref={composedRefs}\n                style={{\n                  // flex layout so we can place the scroll buttons properly\n                  display: 'flex',\n                  flexDirection: 'column',\n                  // reset the outline by default as the content MAY get focused\n                  outline: 'none',\n                  ...contentProps.style,\n                }}\n                onKeyDown={composeEventHandlers(contentProps.onKeyDown, (event) => {\n                  const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n\n                  // select should not be navigated using tab key so we prevent it\n                  if (event.key === 'Tab') event.preventDefault();\n\n                  if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);\n\n                  if (['ArrowUp', 'ArrowDown', 'Home', 'End'].includes(event.key)) {\n                    const items = getItems().filter((item) => !item.disabled);\n                    let candidateNodes = items.map((item) => item.ref.current!);\n\n                    if (['ArrowUp', 'End'].includes(event.key)) {\n                      candidateNodes = candidateNodes.slice().reverse();\n                    }\n                    if (['ArrowUp', 'ArrowDown'].includes(event.key)) {\n                      const currentElement = event.target as SelectItemElement;\n                      const currentIndex = candidateNodes.indexOf(currentElement);\n                      candidateNodes = candidateNodes.slice(currentIndex + 1);\n                    }\n\n                    /**\n                     * Imperative focus during keydown is risky so we prevent React's batching updates\n                     * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n                     */\n                    setTimeout(() => focusFirst(candidateNodes));\n\n                    event.preventDefault();\n                  }\n                })}\n              />\n            </DismissableLayer>\n          </FocusScope>\n        </RemoveScroll>\n      </SelectContentProvider>\n    );\n  }\n);\n\nSelectContentImpl.displayName = CONTENT_IMPL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectItemAlignedPosition\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_ALIGNED_POSITION_NAME = 'SelectItemAlignedPosition';\n\ntype SelectItemAlignedPositionElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectItemAlignedPositionProps extends PrimitiveDivProps, SelectPopperPrivateProps {}\n\nconst SelectItemAlignedPosition = React.forwardRef<\n  SelectItemAlignedPositionElement,\n  SelectItemAlignedPositionProps\n>((props: ScopedProps<SelectItemAlignedPositionProps>, forwardedRef) => {\n  const { __scopeSelect, onPlaced, ...popperProps } = props;\n  const context = useSelectContext(CONTENT_NAME, __scopeSelect);\n  const contentContext = useSelectContentContext(CONTENT_NAME, __scopeSelect);\n  const [contentWrapper, setContentWrapper] = React.useState<HTMLDivElement | null>(null);\n  const [content, setContent] = React.useState<SelectItemAlignedPositionElement | null>(null);\n  const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));\n  const getItems = useCollection(__scopeSelect);\n  const shouldExpandOnScrollRef = React.useRef(false);\n  const shouldRepositionRef = React.useRef(true);\n\n  const { viewport, selectedItem, selectedItemText, focusSelectedItem } = contentContext;\n  const position = React.useCallback(() => {\n    if (\n      context.trigger &&\n      context.valueNode &&\n      contentWrapper &&\n      content &&\n      viewport &&\n      selectedItem &&\n      selectedItemText\n    ) {\n      const triggerRect = context.trigger.getBoundingClientRect();\n\n      // -----------------------------------------------------------------------------------------\n      //  Horizontal positioning\n      // -----------------------------------------------------------------------------------------\n      const contentRect = content.getBoundingClientRect();\n      const valueNodeRect = context.valueNode.getBoundingClientRect();\n      const itemTextRect = selectedItemText.getBoundingClientRect();\n\n      if (context.dir !== 'rtl') {\n        const itemTextOffset = itemTextRect.left - contentRect.left;\n        const left = valueNodeRect.left - itemTextOffset;\n        const leftDelta = triggerRect.left - left;\n        const minContentWidth = triggerRect.width + leftDelta;\n        const contentWidth = Math.max(minContentWidth, contentRect.width);\n        const rightEdge = window.innerWidth - CONTENT_MARGIN;\n        const clampedLeft = clamp(left, [CONTENT_MARGIN, rightEdge - contentWidth]);\n\n        contentWrapper.style.minWidth = minContentWidth + 'px';\n        contentWrapper.style.left = clampedLeft + 'px';\n      } else {\n        const itemTextOffset = contentRect.right - itemTextRect.right;\n        const right = window.innerWidth - valueNodeRect.right - itemTextOffset;\n        const rightDelta = window.innerWidth - triggerRect.right - right;\n        const minContentWidth = triggerRect.width + rightDelta;\n        const contentWidth = Math.max(minContentWidth, contentRect.width);\n        const leftEdge = window.innerWidth - CONTENT_MARGIN;\n        const clampedRight = clamp(right, [CONTENT_MARGIN, leftEdge - contentWidth]);\n\n        contentWrapper.style.minWidth = minContentWidth + 'px';\n        contentWrapper.style.right = clampedRight + 'px';\n      }\n\n      // -----------------------------------------------------------------------------------------\n      // Vertical positioning\n      // -----------------------------------------------------------------------------------------\n      const items = getItems();\n      const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;\n      const itemsHeight = viewport.scrollHeight;\n\n      const contentStyles = window.getComputedStyle(content);\n      const contentBorderTopWidth = parseInt(contentStyles.borderTopWidth, 10);\n      const contentPaddingTop = parseInt(contentStyles.paddingTop, 10);\n      const contentBorderBottomWidth = parseInt(contentStyles.borderBottomWidth, 10);\n      const contentPaddingBottom = parseInt(contentStyles.paddingBottom, 10);\n      const fullContentHeight = contentBorderTopWidth + contentPaddingTop + itemsHeight + contentPaddingBottom + contentBorderBottomWidth; // prettier-ignore\n      const minContentHeight = Math.min(selectedItem.offsetHeight * 5, fullContentHeight);\n\n      const viewportStyles = window.getComputedStyle(viewport);\n      const viewportPaddingTop = parseInt(viewportStyles.paddingTop, 10);\n      const viewportPaddingBottom = parseInt(viewportStyles.paddingBottom, 10);\n\n      const topEdgeToTriggerMiddle = triggerRect.top + triggerRect.height / 2 - CONTENT_MARGIN;\n      const triggerMiddleToBottomEdge = availableHeight - topEdgeToTriggerMiddle;\n\n      const selectedItemHalfHeight = selectedItem.offsetHeight / 2;\n      const itemOffsetMiddle = selectedItem.offsetTop + selectedItemHalfHeight;\n      const contentTopToItemMiddle = contentBorderTopWidth + contentPaddingTop + itemOffsetMiddle;\n      const itemMiddleToContentBottom = fullContentHeight - contentTopToItemMiddle;\n\n      const willAlignWithoutTopOverflow = contentTopToItemMiddle <= topEdgeToTriggerMiddle;\n\n      if (willAlignWithoutTopOverflow) {\n        const isLastItem = selectedItem === items[items.length - 1].ref.current;\n        contentWrapper.style.bottom = 0 + 'px';\n        const viewportOffsetBottom =\n          content.clientHeight - viewport.offsetTop - viewport.offsetHeight;\n        const clampedTriggerMiddleToBottomEdge = Math.max(\n          triggerMiddleToBottomEdge,\n          selectedItemHalfHeight +\n            // viewport might have padding bottom, include it to avoid a scrollable viewport\n            (isLastItem ? viewportPaddingBottom : 0) +\n            viewportOffsetBottom +\n            contentBorderBottomWidth\n        );\n        const height = contentTopToItemMiddle + clampedTriggerMiddleToBottomEdge;\n        contentWrapper.style.height = height + 'px';\n      } else {\n        const isFirstItem = selectedItem === items[0].ref.current;\n        contentWrapper.style.top = 0 + 'px';\n        const clampedTopEdgeToTriggerMiddle = Math.max(\n          topEdgeToTriggerMiddle,\n          contentBorderTopWidth +\n            viewport.offsetTop +\n            // viewport might have padding top, include it to avoid a scrollable viewport\n            (isFirstItem ? viewportPaddingTop : 0) +\n            selectedItemHalfHeight\n        );\n        const height = clampedTopEdgeToTriggerMiddle + itemMiddleToContentBottom;\n        contentWrapper.style.height = height + 'px';\n        viewport.scrollTop = contentTopToItemMiddle - topEdgeToTriggerMiddle + viewport.offsetTop;\n      }\n\n      contentWrapper.style.margin = `${CONTENT_MARGIN}px 0`;\n      contentWrapper.style.minHeight = minContentHeight + 'px';\n      contentWrapper.style.maxHeight = availableHeight + 'px';\n      // -----------------------------------------------------------------------------------------\n\n      onPlaced?.();\n\n      // we don't want the initial scroll position adjustment to trigger \"expand on scroll\"\n      // so we explicitly turn it on only after they've registered.\n      requestAnimationFrame(() => (shouldExpandOnScrollRef.current = true));\n    }\n  }, [\n    getItems,\n    context.trigger,\n    context.valueNode,\n    contentWrapper,\n    content,\n    viewport,\n    selectedItem,\n    selectedItemText,\n    context.dir,\n    onPlaced,\n  ]);\n\n  useLayoutEffect(() => position(), [position]);\n\n  // copy z-index from content to wrapper\n  const [contentZIndex, setContentZIndex] = React.useState<string>();\n  useLayoutEffect(() => {\n    if (content) setContentZIndex(window.getComputedStyle(content).zIndex);\n  }, [content]);\n\n  // When the viewport becomes scrollable at the top, the scroll up button will mount.\n  // Because it is part of the normal flow, it will push down the viewport, thus throwing our\n  // trigger => selectedItem alignment off by the amount the viewport was pushed down.\n  // We wait for this to happen and then re-run the positining logic one more time to account for it.\n  const handleScrollButtonChange = React.useCallback(\n    (node: SelectScrollButtonImplElement | null) => {\n      if (node && shouldRepositionRef.current === true) {\n        position();\n        focusSelectedItem?.();\n        shouldRepositionRef.current = false;\n      }\n    },\n    [position, focusSelectedItem]\n  );\n\n  return (\n    <SelectViewportProvider\n      scope={__scopeSelect}\n      contentWrapper={contentWrapper}\n      shouldExpandOnScrollRef={shouldExpandOnScrollRef}\n      onScrollButtonChange={handleScrollButtonChange}\n    >\n      <div\n        ref={setContentWrapper}\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          position: 'fixed',\n          zIndex: contentZIndex,\n        }}\n      >\n        <Primitive.div\n          {...popperProps}\n          ref={composedRefs}\n          style={{\n            // When we get the height of the content, it includes borders. If we were to set\n            // the height without having `boxSizing: 'border-box'` it would be too big.\n            boxSizing: 'border-box',\n            // We need to ensure the content doesn't get taller than the wrapper\n            maxHeight: '100%',\n            ...popperProps.style,\n          }}\n        />\n      </div>\n    </SelectViewportProvider>\n  );\n});\n\nSelectItemAlignedPosition.displayName = ITEM_ALIGNED_POSITION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectPopperPosition\n * -----------------------------------------------------------------------------------------------*/\n\nconst POPPER_POSITION_NAME = 'SelectPopperPosition';\n\ntype SelectPopperPositionElement = React.ElementRef<typeof PopperPrimitive.Content>;\ntype PopperContentProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Content>;\ninterface SelectPopperPositionProps extends PopperContentProps, SelectPopperPrivateProps {}\n\nconst SelectPopperPosition = React.forwardRef<\n  SelectPopperPositionElement,\n  SelectPopperPositionProps\n>((props: ScopedProps<SelectPopperPositionProps>, forwardedRef) => {\n  const {\n    __scopeSelect,\n    align = 'start',\n    collisionPadding = CONTENT_MARGIN,\n    ...popperProps\n  } = props;\n  const popperScope = usePopperScope(__scopeSelect);\n\n  return (\n    <PopperPrimitive.Content\n      {...popperScope}\n      {...popperProps}\n      ref={forwardedRef}\n      align={align}\n      collisionPadding={collisionPadding}\n      style={{\n        // Ensure border-box for floating-ui calculations\n        boxSizing: 'border-box',\n        ...popperProps.style,\n        // re-namespace exposed content custom properties\n        ...{\n          '--radix-select-content-transform-origin': 'var(--radix-popper-transform-origin)',\n          '--radix-select-content-available-width': 'var(--radix-popper-available-width)',\n          '--radix-select-content-available-height': 'var(--radix-popper-available-height)',\n          '--radix-select-trigger-width': 'var(--radix-popper-anchor-width)',\n          '--radix-select-trigger-height': 'var(--radix-popper-anchor-height)',\n        },\n      }}\n    />\n  );\n});\n\nSelectPopperPosition.displayName = POPPER_POSITION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectViewport\n * -----------------------------------------------------------------------------------------------*/\n\ntype SelectViewportContextValue = {\n  contentWrapper?: HTMLDivElement | null;\n  shouldExpandOnScrollRef?: React.RefObject<boolean>;\n  onScrollButtonChange?: (node: SelectScrollButtonImplElement | null) => void;\n};\n\nconst [SelectViewportProvider, useSelectViewportContext] =\n  createSelectContext<SelectViewportContextValue>(CONTENT_NAME, {});\n\nconst VIEWPORT_NAME = 'SelectViewport';\n\ntype SelectViewportElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface SelectViewportProps extends PrimitiveDivProps {}\n\nconst SelectViewport = React.forwardRef<SelectViewportElement, SelectViewportProps>(\n  (props: ScopedProps<SelectViewportProps>, forwardedRef) => {\n    const { __scopeSelect, ...viewportProps } = props;\n    const contentContext = useSelectContentContext(VIEWPORT_NAME, __scopeSelect);\n    const viewportContext = useSelectViewportContext(VIEWPORT_NAME, __scopeSelect);\n    const composedRefs = useComposedRefs(forwardedRef, contentContext.onViewportChange);\n    const prevScrollTopRef = React.useRef(0);\n    return (\n      <>\n        {/* Hide scrollbars cross-browser and enable momentum scroll for touch devices */}\n        <style\n          dangerouslySetInnerHTML={{\n            __html: `[data-radix-select-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-select-viewport]::-webkit-scrollbar{display:none}`,\n          }}\n        />\n        <Collection.Slot scope={__scopeSelect}>\n          <Primitive.div\n            data-radix-select-viewport=\"\"\n            role=\"presentation\"\n            {...viewportProps}\n            ref={composedRefs}\n            style={{\n              // we use position: 'relative' here on the `viewport` so that when we call\n              // `selectedItem.offsetTop` in calculations, the offset is relative to the viewport\n              // (independent of the scrollUpButton).\n              position: 'relative',\n              flex: 1,\n              overflow: 'auto',\n              ...viewportProps.style,\n            }}\n            onScroll={composeEventHandlers(viewportProps.onScroll, (event) => {\n              const viewport = event.currentTarget;\n              const { contentWrapper, shouldExpandOnScrollRef } = viewportContext;\n              if (shouldExpandOnScrollRef?.current && contentWrapper) {\n                const scrolledBy = Math.abs(prevScrollTopRef.current - viewport.scrollTop);\n                if (scrolledBy > 0) {\n                  const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;\n                  const cssMinHeight = parseFloat(contentWrapper.style.minHeight);\n                  const cssHeight = parseFloat(contentWrapper.style.height);\n                  const prevHeight = Math.max(cssMinHeight, cssHeight);\n\n                  if (prevHeight < availableHeight) {\n                    const nextHeight = prevHeight + scrolledBy;\n                    const clampedNextHeight = Math.min(availableHeight, nextHeight);\n                    const heightDiff = nextHeight - clampedNextHeight;\n\n                    contentWrapper.style.height = clampedNextHeight + 'px';\n                    if (contentWrapper.style.bottom === '0px') {\n                      viewport.scrollTop = heightDiff > 0 ? heightDiff : 0;\n                      // ensure the content stays pinned to the bottom\n                      contentWrapper.style.justifyContent = 'flex-end';\n                    }\n                  }\n                }\n              }\n              prevScrollTopRef.current = viewport.scrollTop;\n            })}\n          />\n        </Collection.Slot>\n      </>\n    );\n  }\n);\n\nSelectViewport.displayName = VIEWPORT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst GROUP_NAME = 'SelectGroup';\n\ntype SelectGroupContextValue = { id: string };\n\nconst [SelectGroupContextProvider, useSelectGroupContext] =\n  createSelectContext<SelectGroupContextValue>(GROUP_NAME);\n\ntype SelectGroupElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectGroupProps extends PrimitiveDivProps {}\n\nconst SelectGroup = React.forwardRef<SelectGroupElement, SelectGroupProps>(\n  (props: ScopedProps<SelectGroupProps>, forwardedRef) => {\n    const { __scopeSelect, ...groupProps } = props;\n    const groupId = useId();\n    return (\n      <SelectGroupContextProvider scope={__scopeSelect} id={groupId}>\n        <Primitive.div role=\"group\" aria-labelledby={groupId} {...groupProps} ref={forwardedRef} />\n      </SelectGroupContextProvider>\n    );\n  }\n);\n\nSelectGroup.displayName = GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectLabel\n * -----------------------------------------------------------------------------------------------*/\n\nconst LABEL_NAME = 'SelectLabel';\n\ntype SelectLabelElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectLabelProps extends PrimitiveDivProps {}\n\nconst SelectLabel = React.forwardRef<SelectLabelElement, SelectLabelProps>(\n  (props: ScopedProps<SelectLabelProps>, forwardedRef) => {\n    const { __scopeSelect, ...labelProps } = props;\n    const groupContext = useSelectGroupContext(LABEL_NAME, __scopeSelect);\n    return <Primitive.div id={groupContext.id} {...labelProps} ref={forwardedRef} />;\n  }\n);\n\nSelectLabel.displayName = LABEL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'SelectItem';\n\ntype SelectItemContextValue = {\n  value: string;\n  disabled: boolean;\n  textId: string;\n  isSelected: boolean;\n  onItemTextChange(node: SelectItemTextElement | null): void;\n};\n\nconst [SelectItemContextProvider, useSelectItemContext] =\n  createSelectContext<SelectItemContextValue>(ITEM_NAME);\n\ntype SelectItemElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectItemProps extends PrimitiveDivProps {\n  value: string;\n  disabled?: boolean;\n  textValue?: string;\n}\n\nconst SelectItem = React.forwardRef<SelectItemElement, SelectItemProps>(\n  (props: ScopedProps<SelectItemProps>, forwardedRef) => {\n    const {\n      __scopeSelect,\n      value,\n      disabled = false,\n      textValue: textValueProp,\n      ...itemProps\n    } = props;\n    const context = useSelectContext(ITEM_NAME, __scopeSelect);\n    const contentContext = useSelectContentContext(ITEM_NAME, __scopeSelect);\n    const isSelected = context.value === value;\n    const [textValue, setTextValue] = React.useState(textValueProp ?? '');\n    const [isFocused, setIsFocused] = React.useState(false);\n    const composedRefs = useComposedRefs(forwardedRef, (node) =>\n      contentContext.itemRefCallback?.(node, value, disabled)\n    );\n    const textId = useId();\n\n    const handleSelect = () => {\n      if (!disabled) {\n        context.onValueChange(value);\n        context.onOpenChange(false);\n      }\n    };\n\n    if (value === '') {\n      throw new Error(\n        'A <Select.Item /> must have a value prop that is not an empty string. This is because the Select value can be set to an empty string to clear the selection and show the placeholder.'\n      );\n    }\n\n    return (\n      <SelectItemContextProvider\n        scope={__scopeSelect}\n        value={value}\n        disabled={disabled}\n        textId={textId}\n        isSelected={isSelected}\n        onItemTextChange={React.useCallback((node) => {\n          setTextValue((prevTextValue) => prevTextValue || (node?.textContent ?? '').trim());\n        }, [])}\n      >\n        <Collection.ItemSlot\n          scope={__scopeSelect}\n          value={value}\n          disabled={disabled}\n          textValue={textValue}\n        >\n          <Primitive.div\n            role=\"option\"\n            aria-labelledby={textId}\n            data-highlighted={isFocused ? '' : undefined}\n            // `isFocused` caveat fixes stuttering in VoiceOver\n            aria-selected={isSelected && isFocused}\n            data-state={isSelected ? 'checked' : 'unchecked'}\n            aria-disabled={disabled || undefined}\n            data-disabled={disabled ? '' : undefined}\n            tabIndex={disabled ? undefined : -1}\n            {...itemProps}\n            ref={composedRefs}\n            onFocus={composeEventHandlers(itemProps.onFocus, () => setIsFocused(true))}\n            onBlur={composeEventHandlers(itemProps.onBlur, () => setIsFocused(false))}\n            onPointerUp={composeEventHandlers(itemProps.onPointerUp, handleSelect)}\n            onPointerMove={composeEventHandlers(itemProps.onPointerMove, (event) => {\n              if (disabled) {\n                contentContext.onItemLeave?.();\n              } else {\n                // even though safari doesn't support this option, it's acceptable\n                // as it only means it might scroll a few pixels when using the pointer.\n                event.currentTarget.focus({ preventScroll: true });\n              }\n            })}\n            onPointerLeave={composeEventHandlers(itemProps.onPointerLeave, (event) => {\n              if (event.currentTarget === document.activeElement) {\n                contentContext.onItemLeave?.();\n              }\n            })}\n            onKeyDown={composeEventHandlers(itemProps.onKeyDown, (event) => {\n              const isTypingAhead = contentContext.searchRef?.current !== '';\n              if (isTypingAhead && event.key === ' ') return;\n              if (SELECTION_KEYS.includes(event.key)) handleSelect();\n              // prevent page scroll if using the space key to select an item\n              if (event.key === ' ') event.preventDefault();\n            })}\n          />\n        </Collection.ItemSlot>\n      </SelectItemContextProvider>\n    );\n  }\n);\n\nSelectItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectItemText\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_TEXT_NAME = 'SelectItemText';\n\ntype SelectItemTextElement = React.ElementRef<typeof Primitive.span>;\ninterface SelectItemTextProps extends PrimitiveSpanProps {}\n\nconst SelectItemText = React.forwardRef<SelectItemTextElement, SelectItemTextProps>(\n  (props: ScopedProps<SelectItemTextProps>, forwardedRef) => {\n    // We ignore `className` and `style` as this part shouldn't be styled.\n    const { __scopeSelect, className, style, ...itemTextProps } = props;\n    const context = useSelectContext(ITEM_TEXT_NAME, __scopeSelect);\n    const contentContext = useSelectContentContext(ITEM_TEXT_NAME, __scopeSelect);\n    const itemContext = useSelectItemContext(ITEM_TEXT_NAME, __scopeSelect);\n    const nativeOptionsContext = useSelectNativeOptionsContext(ITEM_TEXT_NAME, __scopeSelect);\n    const [itemTextNode, setItemTextNode] = React.useState<SelectItemTextElement | null>(null);\n    const composedRefs = useComposedRefs(\n      forwardedRef,\n      (node) => setItemTextNode(node),\n      itemContext.onItemTextChange,\n      (node) => contentContext.itemTextRefCallback?.(node, itemContext.value, itemContext.disabled)\n    );\n\n    const textContent = itemTextNode?.textContent;\n    const nativeOption = React.useMemo(\n      () => (\n        <option key={itemContext.value} value={itemContext.value} disabled={itemContext.disabled}>\n          {textContent}\n        </option>\n      ),\n      [itemContext.disabled, itemContext.value, textContent]\n    );\n\n    const { onNativeOptionAdd, onNativeOptionRemove } = nativeOptionsContext;\n    useLayoutEffect(() => {\n      onNativeOptionAdd(nativeOption);\n      return () => onNativeOptionRemove(nativeOption);\n    }, [onNativeOptionAdd, onNativeOptionRemove, nativeOption]);\n\n    return (\n      <>\n        <Primitive.span id={itemContext.textId} {...itemTextProps} ref={composedRefs} />\n\n        {/* Portal the select item text into the trigger value node */}\n        {itemContext.isSelected && context.valueNode && !context.valueNodeHasChildren\n          ? ReactDOM.createPortal(itemTextProps.children, context.valueNode)\n          : null}\n      </>\n    );\n  }\n);\n\nSelectItemText.displayName = ITEM_TEXT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectItemIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_INDICATOR_NAME = 'SelectItemIndicator';\n\ntype SelectItemIndicatorElement = React.ElementRef<typeof Primitive.span>;\ninterface SelectItemIndicatorProps extends PrimitiveSpanProps {}\n\nconst SelectItemIndicator = React.forwardRef<SelectItemIndicatorElement, SelectItemIndicatorProps>(\n  (props: ScopedProps<SelectItemIndicatorProps>, forwardedRef) => {\n    const { __scopeSelect, ...itemIndicatorProps } = props;\n    const itemContext = useSelectItemContext(ITEM_INDICATOR_NAME, __scopeSelect);\n    return itemContext.isSelected ? (\n      <Primitive.span aria-hidden {...itemIndicatorProps} ref={forwardedRef} />\n    ) : null;\n  }\n);\n\nSelectItemIndicator.displayName = ITEM_INDICATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectScrollUpButton\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLL_UP_BUTTON_NAME = 'SelectScrollUpButton';\n\ntype SelectScrollUpButtonElement = SelectScrollButtonImplElement;\ninterface SelectScrollUpButtonProps extends Omit<SelectScrollButtonImplProps, 'onAutoScroll'> {}\n\nconst SelectScrollUpButton = React.forwardRef<\n  SelectScrollUpButtonElement,\n  SelectScrollUpButtonProps\n>((props: ScopedProps<SelectScrollUpButtonProps>, forwardedRef) => {\n  const contentContext = useSelectContentContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);\n  const viewportContext = useSelectViewportContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);\n  const [canScrollUp, setCanScrollUp] = React.useState(false);\n  const composedRefs = useComposedRefs(forwardedRef, viewportContext.onScrollButtonChange);\n\n  useLayoutEffect(() => {\n    if (contentContext.viewport && contentContext.isPositioned) {\n      const viewport = contentContext.viewport;\n      function handleScroll() {\n        const canScrollUp = viewport.scrollTop > 0;\n        setCanScrollUp(canScrollUp);\n      }\n      handleScroll();\n      viewport.addEventListener('scroll', handleScroll);\n      return () => viewport.removeEventListener('scroll', handleScroll);\n    }\n  }, [contentContext.viewport, contentContext.isPositioned]);\n\n  return canScrollUp ? (\n    <SelectScrollButtonImpl\n      {...props}\n      ref={composedRefs}\n      onAutoScroll={() => {\n        const { viewport, selectedItem } = contentContext;\n        if (viewport && selectedItem) {\n          viewport.scrollTop = viewport.scrollTop - selectedItem.offsetHeight;\n        }\n      }}\n    />\n  ) : null;\n});\n\nSelectScrollUpButton.displayName = SCROLL_UP_BUTTON_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectScrollDownButton\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLL_DOWN_BUTTON_NAME = 'SelectScrollDownButton';\n\ntype SelectScrollDownButtonElement = SelectScrollButtonImplElement;\ninterface SelectScrollDownButtonProps extends Omit<SelectScrollButtonImplProps, 'onAutoScroll'> {}\n\nconst SelectScrollDownButton = React.forwardRef<\n  SelectScrollDownButtonElement,\n  SelectScrollDownButtonProps\n>((props: ScopedProps<SelectScrollDownButtonProps>, forwardedRef) => {\n  const contentContext = useSelectContentContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);\n  const viewportContext = useSelectViewportContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);\n  const [canScrollDown, setCanScrollDown] = React.useState(false);\n  const composedRefs = useComposedRefs(forwardedRef, viewportContext.onScrollButtonChange);\n\n  useLayoutEffect(() => {\n    if (contentContext.viewport && contentContext.isPositioned) {\n      const viewport = contentContext.viewport;\n      function handleScroll() {\n        const maxScroll = viewport.scrollHeight - viewport.clientHeight;\n        // we use Math.ceil here because if the UI is zoomed-in\n        // `scrollTop` is not always reported as an integer\n        const canScrollDown = Math.ceil(viewport.scrollTop) < maxScroll;\n        setCanScrollDown(canScrollDown);\n      }\n      handleScroll();\n      viewport.addEventListener('scroll', handleScroll);\n      return () => viewport.removeEventListener('scroll', handleScroll);\n    }\n  }, [contentContext.viewport, contentContext.isPositioned]);\n\n  return canScrollDown ? (\n    <SelectScrollButtonImpl\n      {...props}\n      ref={composedRefs}\n      onAutoScroll={() => {\n        const { viewport, selectedItem } = contentContext;\n        if (viewport && selectedItem) {\n          viewport.scrollTop = viewport.scrollTop + selectedItem.offsetHeight;\n        }\n      }}\n    />\n  ) : null;\n});\n\nSelectScrollDownButton.displayName = SCROLL_DOWN_BUTTON_NAME;\n\ntype SelectScrollButtonImplElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectScrollButtonImplProps extends PrimitiveDivProps {\n  onAutoScroll(): void;\n}\n\nconst SelectScrollButtonImpl = React.forwardRef<\n  SelectScrollButtonImplElement,\n  SelectScrollButtonImplProps\n>((props: ScopedProps<SelectScrollButtonImplProps>, forwardedRef) => {\n  const { __scopeSelect, onAutoScroll, ...scrollIndicatorProps } = props;\n  const contentContext = useSelectContentContext('SelectScrollButton', __scopeSelect);\n  const autoScrollTimerRef = React.useRef<number | null>(null);\n  const getItems = useCollection(__scopeSelect);\n\n  const clearAutoScrollTimer = React.useCallback(() => {\n    if (autoScrollTimerRef.current !== null) {\n      window.clearInterval(autoScrollTimerRef.current);\n      autoScrollTimerRef.current = null;\n    }\n  }, []);\n\n  React.useEffect(() => {\n    return () => clearAutoScrollTimer();\n  }, [clearAutoScrollTimer]);\n\n  // When the viewport becomes scrollable on either side, the relevant scroll button will mount.\n  // Because it is part of the normal flow, it will push down (top button) or shrink (bottom button)\n  // the viewport, potentially causing the active item to now be partially out of view.\n  // We re-run the `scrollIntoView` logic to make sure it stays within the viewport.\n  useLayoutEffect(() => {\n    const activeItem = getItems().find((item) => item.ref.current === document.activeElement);\n    activeItem?.ref.current?.scrollIntoView({ block: 'nearest' });\n  }, [getItems]);\n\n  return (\n    <Primitive.div\n      aria-hidden\n      {...scrollIndicatorProps}\n      ref={forwardedRef}\n      style={{ flexShrink: 0, ...scrollIndicatorProps.style }}\n      onPointerDown={composeEventHandlers(scrollIndicatorProps.onPointerDown, () => {\n        if (autoScrollTimerRef.current === null) {\n          autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);\n        }\n      })}\n      onPointerMove={composeEventHandlers(scrollIndicatorProps.onPointerMove, () => {\n        contentContext.onItemLeave?.();\n        if (autoScrollTimerRef.current === null) {\n          autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);\n        }\n      })}\n      onPointerLeave={composeEventHandlers(scrollIndicatorProps.onPointerLeave, () => {\n        clearAutoScrollTimer();\n      })}\n    />\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * SelectSeparator\n * -----------------------------------------------------------------------------------------------*/\n\nconst SEPARATOR_NAME = 'SelectSeparator';\n\ntype SelectSeparatorElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectSeparatorProps extends PrimitiveDivProps {}\n\nconst SelectSeparator = React.forwardRef<SelectSeparatorElement, SelectSeparatorProps>(\n  (props: ScopedProps<SelectSeparatorProps>, forwardedRef) => {\n    const { __scopeSelect, ...separatorProps } = props;\n    return <Primitive.div aria-hidden {...separatorProps} ref={forwardedRef} />;\n  }\n);\n\nSelectSeparator.displayName = SEPARATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'SelectArrow';\n\ntype SelectArrowElement = React.ElementRef<typeof PopperPrimitive.Arrow>;\ntype PopperArrowProps = Radix.ComponentPropsWithoutRef<typeof PopperPrimitive.Arrow>;\ninterface SelectArrowProps extends PopperArrowProps {}\n\nconst SelectArrow = React.forwardRef<SelectArrowElement, SelectArrowProps>(\n  (props: ScopedProps<SelectArrowProps>, forwardedRef) => {\n    const { __scopeSelect, ...arrowProps } = props;\n    const popperScope = usePopperScope(__scopeSelect);\n    const context = useSelectContext(ARROW_NAME, __scopeSelect);\n    const contentContext = useSelectContentContext(ARROW_NAME, __scopeSelect);\n    return context.open && contentContext.position === 'popper' ? (\n      <PopperPrimitive.Arrow {...popperScope} {...arrowProps} ref={forwardedRef} />\n    ) : null;\n  }\n);\n\nSelectArrow.displayName = ARROW_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction shouldShowPlaceholder(value?: string) {\n  return value === '' || value === undefined;\n}\n\nconst BubbleSelect = React.forwardRef<HTMLSelectElement, React.ComponentPropsWithoutRef<'select'>>(\n  (props, forwardedRef) => {\n    const { value, ...selectProps } = props;\n    const ref = React.useRef<HTMLSelectElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const prevValue = usePrevious(value);\n\n    // Bubble value change to parents (e.g form change event)\n    React.useEffect(() => {\n      const select = ref.current!;\n      const selectProto = window.HTMLSelectElement.prototype;\n      const descriptor = Object.getOwnPropertyDescriptor(\n        selectProto,\n        'value'\n      ) as PropertyDescriptor;\n      const setValue = descriptor.set;\n      if (prevValue !== value && setValue) {\n        const event = new Event('change', { bubbles: true });\n        setValue.call(select, value);\n        select.dispatchEvent(event);\n      }\n    }, [prevValue, value]);\n\n    /**\n     * We purposefully use a `select` here to support form autofill as much\n     * as possible.\n     *\n     * We purposefully do not add the `value` attribute here to allow the value\n     * to be set programatically and bubble to any parent form `onChange` event.\n     * Adding the `value` will cause React to consider the programatic\n     * dispatch a duplicate and it will get swallowed.\n     *\n     * We use `VisuallyHidden` rather than `display: \"none\"` because Safari autofill\n     * won't work otherwise.\n     */\n    return (\n      <VisuallyHidden asChild>\n        <select {...selectProps} ref={composedRefs} defaultValue={value} />\n      </VisuallyHidden>\n    );\n  }\n);\n\nBubbleSelect.displayName = 'BubbleSelect';\n\nfunction useTypeaheadSearch(onSearchChange: (search: string) => void) {\n  const handleSearchChange = useCallbackRef(onSearchChange);\n  const searchRef = React.useRef('');\n  const timerRef = React.useRef(0);\n\n  const handleTypeaheadSearch = React.useCallback(\n    (key: string) => {\n      const search = searchRef.current + key;\n      handleSearchChange(search);\n\n      (function updateSearch(value: string) {\n        searchRef.current = value;\n        window.clearTimeout(timerRef.current);\n        // Reset `searchRef` 1 second after it was last updated\n        if (value !== '') timerRef.current = window.setTimeout(() => updateSearch(''), 1000);\n      })(search);\n    },\n    [handleSearchChange]\n  );\n\n  const resetTypeahead = React.useCallback(() => {\n    searchRef.current = '';\n    window.clearTimeout(timerRef.current);\n  }, []);\n\n  React.useEffect(() => {\n    return () => window.clearTimeout(timerRef.current);\n  }, []);\n\n  return [searchRef, handleTypeaheadSearch, resetTypeahead] as const;\n}\n\n/**\n * This is the \"meat\" of the typeahead matching logic. It takes in a list of items,\n * the search and the current item, and returns the next item (or `undefined`).\n *\n * We normalize the search because if a user has repeatedly pressed a character,\n * we want the exact same behavior as if we only had that one character\n * (ie. cycle through items starting with that character)\n *\n * We also reorder the items by wrapping the array around the current item.\n * This is so we always look forward from the current item, and picking the first\n * item will always be the correct one.\n *\n * Finally, if the normalized search is exactly one character, we exclude the\n * current item from the values because otherwise it would be the first to match always\n * and focus would never move. This is as opposed to the regular case, where we\n * don't want focus to move if the current item still matches.\n */\nfunction findNextItem<T extends { textValue: string }>(\n  items: T[],\n  search: string,\n  currentItem?: T\n) {\n  const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);\n  const normalizedSearch = isRepeated ? search[0] : search;\n  const currentItemIndex = currentItem ? items.indexOf(currentItem) : -1;\n  let wrappedItems = wrapArray(items, Math.max(currentItemIndex, 0));\n  const excludeCurrentItem = normalizedSearch.length === 1;\n  if (excludeCurrentItem) wrappedItems = wrappedItems.filter((v) => v !== currentItem);\n  const nextItem = wrappedItems.find((item) =>\n    item.textValue.toLowerCase().startsWith(normalizedSearch.toLowerCase())\n  );\n  return nextItem !== currentItem ? nextItem : undefined;\n}\n\n/**\n * Wraps an array around itself at a given start index\n * Example: `wrapArray(['a', 'b', 'c', 'd'], 2) === ['c', 'd', 'a', 'b']`\n */\nfunction wrapArray<T>(array: T[], startIndex: number) {\n  return array.map((_, index) => array[(startIndex + index) % array.length]);\n}\n\nconst Root = Select;\nconst Trigger = SelectTrigger;\nconst Value = SelectValue;\nconst Icon = SelectIcon;\nconst Portal = SelectPortal;\nconst Content = SelectContent;\nconst Viewport = SelectViewport;\nconst Group = SelectGroup;\nconst Label = SelectLabel;\nconst Item = SelectItem;\nconst ItemText = SelectItemText;\nconst ItemIndicator = SelectItemIndicator;\nconst ScrollUpButton = SelectScrollUpButton;\nconst ScrollDownButton = SelectScrollDownButton;\nconst Separator = SelectSeparator;\nconst Arrow = SelectArrow;\n\nexport {\n  createSelectScope,\n  //\n  Select,\n  SelectTrigger,\n  SelectValue,\n  SelectIcon,\n  SelectPortal,\n  SelectContent,\n  SelectViewport,\n  SelectGroup,\n  SelectLabel,\n  SelectItem,\n  SelectItemText,\n  SelectItemIndicator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n  SelectSeparator,\n  SelectArrow,\n  //\n  Root,\n  Trigger,\n  Value,\n  Icon,\n  Portal,\n  Content,\n  Viewport,\n  Group,\n  Label,\n  Item,\n  ItemText,\n  ItemIndicator,\n  ScrollUpButton,\n  ScrollDownButton,\n  Separator,\n  Arrow,\n};\nexport type {\n  SelectProps,\n  SelectTriggerProps,\n  SelectValueProps,\n  SelectIconProps,\n  SelectPortalProps,\n  SelectContentProps,\n  SelectViewportProps,\n  SelectGroupProps,\n  SelectLabelProps,\n  SelectItemProps,\n  SelectItemTextProps,\n  SelectItemIndicatorProps,\n  SelectScrollUpButtonProps,\n  SelectScrollDownButtonProps,\n  SelectSeparatorProps,\n  SelectArrowProps,\n};\n", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/ui/select.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/ui/select.tsx\");\n  import.meta.hot.lastModified = \"1738409028324.369\";\n}\n// REMIX HMR END\n\nimport * as SelectPrimitive from \"@radix-ui/react-select\";\nimport * as React from \"react\";\nimport { IconMatch } from \"~/components/libs/icon\";\nimport { cn } from \"~/utils/cn\";\nconst Select = SelectPrimitive.Root;\nconst SelectGroup = SelectPrimitive.Group;\nconst SelectValue = SelectPrimitive.Value;\nconst SelectTrigger = React.forwardRef(_c = ({\n  className,\n  children,\n  ...props\n}, ref) => <SelectPrimitive.Trigger ref={ref} className={cn(\"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground/30 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\", className)} {...props}>\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <IconMatch icon=\"caret-down\" className=\"size-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>);\n_c2 = SelectTrigger;\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName;\nconst SelectContent = React.forwardRef(_c3 = ({\n  className,\n  children,\n  position = \"popper\",\n  ...props\n}, ref) => <SelectPrimitive.Portal>\n    <SelectPrimitive.Content ref={ref} className={cn(\"relative z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\", position === \"popper\" && \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\", className)} position={position} {...props}>\n      <SelectPrimitive.Viewport className={cn(\"p-1\", position === \"popper\" && \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\")}>\n        {children}\n      </SelectPrimitive.Viewport>\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>);\n_c4 = SelectContent;\nSelectContent.displayName = SelectPrimitive.Content.displayName;\nconst SelectLabel = React.forwardRef(_c5 = ({\n  className,\n  ...props\n}, ref) => <SelectPrimitive.Label ref={ref} className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)} {...props} />);\n_c6 = SelectLabel;\nSelectLabel.displayName = SelectPrimitive.Label.displayName;\nconst SelectItem = React.forwardRef(_c7 = ({\n  className,\n  children,\n  ...props\n}, ref) => <SelectPrimitive.Item ref={ref} className={cn(\"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\", className)} {...props}>\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <IconMatch icon=\"check\" className=\"size-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>);\n_c8 = SelectItem;\nSelectItem.displayName = SelectPrimitive.Item.displayName;\nconst SelectSeparator = React.forwardRef(_c9 = ({\n  className,\n  ...props\n}, ref) => <SelectPrimitive.Separator ref={ref} className={cn(\"-mx-1 my-1 h-px bg-muted\", className)} {...props} />);\n_c10 = SelectSeparator;\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName;\nexport { Select, SelectContent, SelectGroup, SelectItem, SelectLabel, SelectSeparator, SelectTrigger, SelectValue };\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10;\n$RefreshReg$(_c, \"SelectTrigger$React.forwardRef\");\n$RefreshReg$(_c2, \"SelectTrigger\");\n$RefreshReg$(_c3, \"SelectContent$React.forwardRef\");\n$RefreshReg$(_c4, \"SelectContent\");\n$RefreshReg$(_c5, \"SelectLabel$React.forwardRef\");\n$RefreshReg$(_c6, \"SelectLabel\");\n$RefreshReg$(_c7, \"SelectItem$React.forwardRef\");\n$RefreshReg$(_c8, \"SelectItem\");\n$RefreshReg$(_c9, \"SelectSeparator$React.forwardRef\");\n$RefreshReg$(_c10, \"SelectSeparator\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_jsx_dev_runtime", "_c", "import_react", "clamp", "value", "min", "max", "Math", "usePrevious", "value", "ref", "React", "previous", "current", "VisuallyHidden", "React", "props", "forwardedRef", "$kVwnw$createElement", "position", "border", "width", "height", "padding", "margin", "overflow", "clip", "whiteSpace", "wordWrap", "style", "OPEN_KEYS", "SELECTION_KEYS", "SELECT_NAME", "Collection", "useCollection", "createCollectionScope", "createCollection", "createSelectContext", "createSelectScope", "createContextScope", "createPopperScope", "usePopperScope", "SelectProvider", "useSelectContext", "SelectNativeOptionsProvider", "useSelectNativeOptionsContext", "Select", "props", "open", "openProp", "value", "valueProp", "required", "popperScope", "__scopeSelect", "trigger", "setTrigger", "React", "valueNode", "setValueNode", "valueNodeHasChildren", "setValueNodeHasChildren", "direction", "useDirection", "dir", "setOpen", "useControllableState", "prop", "defaultProp", "defaultOpen", "onChange", "onOpenChange", "setValue", "defaultValue", "onValueChange", "triggerPointerDownPosRef", "isFormControl", "Boolean", "closest", "nativeOptionsSet", "setNativeOptionsSet", "Set", "nativeSelectKey", "Array", "from", "map", "option", "join", "$01b9c$createElement", "useId", "prev", "add", "optionsSet", "delete", "children", "event", "target", "undefined", "TRIGGER_NAME", "SelectTrigger", "React", "props", "forwardedRef", "triggerProps", "popperScope", "usePopperScope", "__scopeSelect", "context", "useSelectContext", "isDisabled", "disabled", "composedRefs", "useComposedRefs", "onTriggerChange", "getItems", "useCollection", "searchRef", "handleTypeaheadSearch", "resetTypeahead", "useTypeaheadSearch", "search", "enabledItems", "filter", "item", "currentItem", "find", "value", "nextItem", "findNextItem", "undefined", "onValueChange", "handleOpen", "onOpenChange", "$01b9c$createElement", "contentId", "open", "required", "dir", "shouldShowPlaceholder", "composeEventHandlers", "onClick", "event", "currentTarget", "focus", "onPointerDown", "target", "hasPointerCapture", "pointerId", "releasePointerCapture", "button", "ctrlKey", "triggerPointerDownPosRef", "current", "x", "Math", "round", "pageX", "y", "pageY", "preventDefault", "onKeyDown", "isTypingAhead", "isModifierKey", "altKey", "metaKey", "key", "length", "OPEN_KEYS", "includes", "VALUE_NAME", "SelectValue", "React", "props", "forwardedRef", "valueProps", "context", "useSelectContext", "__scopeSelect", "onValueNodeHasChildrenChange", "hasChildren", "children", "undefined", "composedRefs", "useComposedRefs", "onValueNodeChange", "useLayoutEffect", "$01b9c$createElement", "pointerEvents", "shouldShowPlaceholder", "value", "$01b9c$Fragment", "placeholder", "SelectIcon", "React", "props", "forwardedRef", "iconProps", "$01b9c$createElement", "children", "SelectPortal", "props", "$01b9c$createElement", "CONTENT_NAME", "SelectContent", "React", "props", "forwardedRef", "context", "useSelectContext", "__scopeSelect", "fragment", "setFragment", "useLayoutEffect", "DocumentFragment", "open", "frag", "ReactDOM", "$01b9c$createElement", "children", "CONTENT_MARGIN", "SelectContentProvider", "useSelectContentContext", "createSelectContext", "CONTENT_NAME", "SelectContentImpl", "React", "props", "forwardedRef", "contentProps", "context", "useSelectContext", "CONTENT_NAME", "__scopeSelect", "content", "setContent", "viewport", "setViewport", "composedRefs", "useComposedRefs", "node", "selectedItem", "setSelectedItem", "selectedItemText", "setSelectedItemText", "getItems", "useCollection", "isPositioned", "setIsPositioned", "firstValidItemFoundRef", "hideOthers", "useFocusGuards", "focusFirst", "candidates", "firstItem", "restItems", "map", "item", "ref", "current", "lastItem", "slice", "PREVIOUSLY_FOCUSED_ELEMENT", "document", "activeElement", "candidate", "scrollIntoView", "block", "scrollTop", "scrollHeight", "focus", "focusSelectedItem", "triggerPointerDownPosRef", "pointerMoveDelta", "x", "y", "handlePointerMove", "event", "Math", "abs", "round", "pageX", "pageY", "handlePointerUp", "preventDefault", "contains", "target", "onOpenChange", "removeEventListener", "addEventListener", "capture", "once", "close", "window", "searchRef", "handleTypeaheadSearch", "useTypeaheadSearch", "search", "enabledItems", "filter", "disabled", "currentItem", "find", "nextItem", "findNextItem", "setTimeout", "itemRefCallback", "value", "isFirstValidItem", "isSelectedItem", "undefined", "handleItemLeave", "itemTextRefCallback", "SelectPosition", "position", "SelectPopperPosition", "SelectItemAlignedPosition", "popperContentProps", "$01b9c$createElement", "Slot", "open", "composeEventHandlers", "onCloseAutoFocus", "trigger", "preventScroll", "contentId", "dir", "display", "flexDirection", "outline", "style", "onKeyDown", "isModifierKey", "ctrlKey", "altKey", "metaKey", "key", "length", "includes", "items", "candidateNodes", "reverse", "currentElement", "currentIndex", "indexOf", "SelectItemAlignedPosition", "React", "props", "forwardedRef", "popperProps", "context", "useSelectContext", "CONTENT_NAME", "__scopeSelect", "contentContext", "useSelectContentContext", "contentWrapper", "setContentWrapper", "content", "setContent", "composedRefs", "useComposedRefs", "node", "getItems", "useCollection", "shouldExpandOnScrollRef", "shouldRepositionRef", "focusSelectedItem", "position", "trigger", "valueNode", "viewport", "selectedItem", "selectedItemText", "triggerRect", "getBoundingClientRect", "contentRect", "valueNodeRect", "itemTextRect", "dir", "itemTextOffset", "left", "leftDelta", "minContentWidth", "width", "contentWidth", "Math", "max", "rightEdge", "window", "innerWidth", "CONTENT_MARGIN", "clampedLeft", "clamp", "style", "minWidth", "right", "rightDelta", "leftEdge", "clampedRight", "items", "availableHeight", "innerHeight", "itemsHeight", "scrollHeight", "contentStyles", "getComputedStyle", "contentBorderTopWidth", "parseInt", "borderTopWidth", "contentPaddingTop", "paddingTop", "contentBorderBottomWidth", "borderBottomWidth", "contentPaddingBottom", "paddingBottom", "fullContentHeight", "minContentHeight", "min", "offsetHeight", "viewportStyles", "viewportPaddingTop", "viewportPaddingBottom", "topEdgeToTriggerMiddle", "top", "height", "triggerMiddleToBottomEdge", "selectedItemHalfHeight", "itemOffsetMiddle", "offsetTop", "contentTopToItemMiddle", "itemMiddleToContentBottom", "willAlignWithoutTopOverflow", "isLastItem", "length", "ref", "current", "bottom", "viewportOffsetBottom", "clientHeight", "clampedTriggerMiddleToBottomEdge", "isFirstItem", "clampedTopEdgeToTriggerMiddle", "scrollTop", "margin", "minHeight", "maxHeight", "onPlaced", "requestAnimationFrame", "useLayoutEffect", "contentZIndex", "setContentZIndex", "zIndex", "handleScrollButtonChange", "$01b9c$createElement", "display", "flexDirection", "boxSizing", "SelectPopperPosition", "React", "props", "forwardedRef", "CONTENT_MARGIN", "popperProps", "popperScope", "usePopperScope", "__scopeSelect", "$01b9c$createElement", "boxSizing", "style", "SelectViewportProvider", "useSelectViewportContext", "createSelectContext", "CONTENT_NAME", "VIEWPORT_NAME", "SelectViewport", "React", "props", "forwardedRef", "viewportProps", "contentContext", "useSelectContentContext", "__scopeSelect", "viewportContext", "composedRefs", "useComposedRefs", "onViewportChange", "prevScrollTopRef", "$01b9c$createElement", "$01b9c$Fragment", "__html", "position", "flex", "overflow", "style", "composeEventHandlers", "onScroll", "event", "viewport", "currentTarget", "shouldExpandOnScrollRef", "current", "contentWrapper", "scrolledBy", "Math", "abs", "scrollTop", "availableHeight", "window", "innerHeight", "CONTENT_MARGIN", "cssMinHeight", "parseFloat", "minHeight", "cssHeight", "height", "prevHeight", "max", "nextHeight", "clampedNextHeight", "min", "heightDiff", "bottom", "justifyContent", "GROUP_NAME", "SelectGroupContextProvider", "useSelectGroupContext", "createSelectContext", "SelectGroup", "React", "props", "forwardedRef", "groupProps", "groupId", "useId", "$01b9c$createElement", "__scopeSelect", "LABEL_NAME", "SelectLabel", "React", "props", "forwardedRef", "labelProps", "groupContext", "useSelectGroupContext", "__scopeSelect", "$01b9c$createElement", "id", "ITEM_NAME", "SelectItemContextProvider", "useSelectItemContext", "createSelectContext", "SelectItem", "React", "props", "forwardedRef", "textValue", "textValueProp", "itemProps", "context", "useSelectContext", "__scopeSelect", "contentContext", "useSelectContentContext", "isSelected", "value", "setTextValue", "isFocused", "setIsFocused", "composedRefs", "useComposedRefs", "node", "itemRefCallback", "disabled", "textId", "useId", "handleSelect", "onValueChange", "onOpenChange", "Error", "$01b9c$createElement", "prevTextValue", "textContent", "trim", "undefined", "composeEventHandlers", "onFocus", "onBlur", "onPointerUp", "onPointerMove", "event", "onItemLeave", "currentTarget", "focus", "preventScroll", "onPointerLeave", "document", "activeElement", "onKeyDown", "isTypingAhead", "searchRef", "current", "key", "SELECTION_KEYS", "includes", "preventDefault", "ITEM_TEXT_NAME", "SelectItemText", "React", "props", "forwardedRef", "itemTextProps", "context", "useSelectContext", "__scopeSelect", "contentContext", "useSelectContentContext", "itemContext", "useSelectItemContext", "nativeOptionsContext", "useSelectNativeOptionsContext", "itemTextNode", "setItemTextNode", "composedRefs", "useComposedRefs", "node", "onItemTextChange", "itemTextRefCallback", "value", "disabled", "textContent", "nativeOption", "$01b9c$createElement", "onNativeOptionRemove", "useLayoutEffect", "onNativeOptionAdd", "$01b9c$Fragment", "textId", "isSelected", "valueNode", "valueNodeHasChildren", "ReactDOM", "children", "ITEM_INDICATOR_NAME", "SelectItemIndicator", "React", "props", "forwardedRef", "itemIndicatorProps", "itemContext", "useSelectItemContext", "__scopeSelect", "isSelected", "$01b9c$createElement", "SelectSeparator", "React", "props", "forwardedRef", "separatorProps", "$01b9c$createElement", "shouldShowPlaceholder", "value", "undefined", "BubbleSelect", "React", "props", "forwardedRef", "selectProps", "ref", "composedRefs", "useComposedRefs", "prevValue", "usePrevious", "select", "current", "selectProto", "window", "HTMLSelectElement", "prototype", "descriptor", "Object", "getOwnPropertyDescriptor", "setValue", "set", "event", "Event", "bubbles", "call", "dispatchEvent", "$01b9c$createElement", "displayName", "useTypeaheadSearch", "onSearchChange", "handleSearchChange", "useCallbackRef", "searchRef", "timerRef", "handleTypeaheadSearch", "key", "search", "updateSearch", "clearTimeout", "setTimeout", "resetTypeahead", "findNextItem", "items", "currentItem", "isRepeated", "length", "Array", "from", "every", "char", "normalizedSearch", "currentItemIndex", "indexOf", "wrappedItems", "wrapArray", "Math", "max", "excludeCurrentItem", "filter", "v", "nextItem", "find", "item", "textValue", "toLowerCase", "startsWith", "array", "startIndex", "map", "_", "index", "Root", "Select", "Trigger", "SelectTrigger", "Value", "SelectValue", "Icon", "SelectIcon", "Portal", "SelectPortal", "Content", "SelectContent", "Viewport", "SelectViewport", "Group", "SelectGroup", "Label", "SelectLabel", "Item", "SelectItem", "ItemText", "SelectItemText", "ItemIndicator", "SelectItemIndicator", "Separator", "SelectSeparator", "import_jsx_dev_runtime", "_c", "_c2", "_c3", "_c", "_c2", "_c3", "import_jsx_dev_runtime", "_c"]
}
