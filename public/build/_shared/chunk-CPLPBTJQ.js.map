{
  "version": 3,
  "sources": ["../../../app/components/shared/theme.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/shared/theme.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/shared/theme.tsx\");\n  import.meta.hot.lastModified = \"1738409028320.369\";\n}\n// REMIX HMR END\n\n/**\n * The main theme components and functions\n *\n * To be used together with app/services/theme-session.server.tsx\n *\n * From https://github.com/remix-run/examples/tree/main/dark-mode\n */\n\nimport { useFetcher } from \"@remix-run/react\";\nimport { createContext, createElement, useContext, useEffect, useRef, useState } from \"react\";\nvar Theme = /*#__PURE__*/function (Theme) {\n  Theme[\"DARK\"] = \"dark\";\n  Theme[\"LIGHT\"] = \"light\";\n  return Theme;\n}(Theme || {});\nconst themes = Object.values(Theme);\nconst ThemeContext = createContext(undefined);\nconst prefersDarkMQ = \"(prefers-color-scheme: dark)\";\nconst getPreferredTheme = () => window.matchMedia(prefersDarkMQ).matches ? Theme.DARK : Theme.LIGHT;\nfunction ThemeProvider({\n  children,\n  specifiedTheme\n}) {\n  _s();\n  const [theme, setTheme] = useState(() => {\n    // On the server, if we don't have a specified theme then we should\n    // return null and the clientThemeCode will set the theme for us\n    // before hydration. Then (during hydration), this code will get the same\n    // value that clientThemeCode got so hydration is happy.\n    if (specifiedTheme) {\n      if (themes.includes(specifiedTheme)) {\n        return specifiedTheme;\n      } else {\n        return null;\n      }\n    }\n\n    // there's no way for us to know what the theme should be in this context\n    // the client will have to figure it out before hydration.\n    if (typeof document === \"undefined\") {\n      return null;\n    }\n    return getPreferredTheme();\n  });\n  const persistTheme = useFetcher();\n  // TODO: remove this when persistTheme is memoized properly\n  const persistThemeRef = useRef(persistTheme);\n  useEffect(() => {\n    persistThemeRef.current = persistTheme;\n  }, [persistTheme]);\n  const mountRun = useRef(false);\n  useEffect(() => {\n    if (!mountRun.current) {\n      mountRun.current = true;\n      return;\n    }\n    if (!theme) {\n      return;\n    }\n    persistThemeRef.current.submit({\n      theme\n    }, {\n      action: \"action/theme\",\n      method: \"post\"\n    });\n  }, [theme]);\n  useEffect(() => {\n    const mediaQuery = window.matchMedia(prefersDarkMQ);\n    const handleChange = () => {\n      setTheme(mediaQuery.matches ? Theme.DARK : Theme.LIGHT);\n    };\n    mediaQuery.addEventListener(\"change\", handleChange);\n    return () => mediaQuery.removeEventListener(\"change\", handleChange);\n  }, []);\n  return <ThemeContext.Provider value={[theme, setTheme]}>{children}</ThemeContext.Provider>;\n}\n_s(ThemeProvider, \"SN8ZJmzl+pcTD5fzlarL+ZpYdPU=\", false, function () {\n  return [useFetcher];\n});\n_c = ThemeProvider;\nconst clientThemeCode = `\n;(() => {\n  const theme = window.matchMedia(${JSON.stringify(prefersDarkMQ)}).matches\n    ? 'dark'\n    : 'light';\n  const cl = document.documentElement.classList;\n  const themeAlreadyApplied = cl.contains('light') || cl.contains('dark');\n  if (themeAlreadyApplied) {\n    // this script shouldn't exist if the theme is already applied!\n    console.warn(\n      \"Hi there, could you let me know you're seeing this message? Thanks!\",\n    );\n  } else {\n    cl.add(theme);\n  }\n  const meta = document.querySelector('meta[name=color-scheme]');\n  if (meta) {\n    if (theme === 'dark') {\n      meta.content = 'dark light';\n    } else if (theme === 'light') {\n      meta.content = 'light dark';\n    }\n  } else {\n    console.warn(\n      \"Hey, could you let me know you're seeing this message? Thanks!\",\n    );\n  }\n})();\n`;\nfunction ThemeHead({\n  ssrTheme\n}) {\n  _s2();\n  const [theme] = useTheme();\n  return <>\n      {/*\n        On the server, \"theme\" might be `null`, so clientThemeCode ensures that\n        this is correct before hydration.\n       */}\n      <meta name=\"color-scheme\" content={theme === \"light\" ? \"light dark\" : \"dark light\"} />\n      {/*\n        If we know what the theme is from the server then we don't need\n        to do fancy tricks prior to hydration to make things match.\n       */}\n      {ssrTheme ? null : <script\n    /**\n     * NOTE: we cannot use type=\"module\" because that automatically makes\n     * the script \"defer\". That doesn't work for us because we need\n     * this script to run synchronously before the rest of the document\n     * is finished loading.\n     */ dangerouslySetInnerHTML={{\n      __html: clientThemeCode\n    }} />}\n    </>;\n}\n_s2(ThemeHead, \"tTTAODy8wohSLSpq8pa8WNTieJI=\", false, function () {\n  return [useTheme];\n});\n_c2 = ThemeHead;\nfunction useTheme() {\n  _s3();\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n\n/**\n * This allows you to render something that depends on the theme without\n * worrying about whether it'll SSR properly when we don't actually know\n * the user's preferred theme.\n */\n_s3(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nfunction ThemedComponent({\n  dark,\n  light,\n  initialOnly = false\n}) {\n  _s4();\n  const [theme] = useTheme();\n  const [initialTheme] = useState(theme);\n  const themeToReference = initialOnly ? initialTheme : theme;\n  const serverRenderWithUnknownTheme = !theme && typeof document === \"undefined\";\n  if (serverRenderWithUnknownTheme) {\n    // stick them both in and our little script will update the DOM to match\n    // what we'll render in the client during hydration.\n    return <>\n        {createElement(\"dark-mode\", null, dark)}\n        {createElement(\"light-mode\", null, light)}\n      </>;\n  }\n  return <>{themeToReference === \"light\" ? light : dark}</>;\n}\n_s4(ThemedComponent, \"2JShMsZqQ0sw6KTRaRifYubBr5w=\", false, function () {\n  return [useTheme];\n});\n_c3 = ThemedComponent;\nfunction isTheme(value) {\n  return typeof value === \"string\" && themes.includes(value);\n}\nfunction NonFlashOfWrongTheme({\n  ssrTheme\n}) {\n  _s5();\n  const [theme] = useTheme();\n  return <>\n      <meta name=\"color-scheme\" content={theme === \"light\" ? \"light dark\" : \"dark light\"} />\n      {ssrTheme ? null : <script dangerouslySetInnerHTML={{\n      __html: clientThemeCode\n    }} />}\n    </>;\n}\n_s5(NonFlashOfWrongTheme, \"tTTAODy8wohSLSpq8pa8WNTieJI=\", false, function () {\n  return [useTheme];\n});\n_c4 = NonFlashOfWrongTheme;\nexport { NonFlashOfWrongTheme, isTheme, Theme, ThemedComponent, ThemeHead, ThemeProvider, useTheme };\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"ThemeProvider\");\n$RefreshReg$(_c2, \"ThemeHead\");\n$RefreshReg$(_c3, \"ThemedComponent\");\n$RefreshReg$(_c4, \"NonFlashOfWrongTheme\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "Theme"]
}
