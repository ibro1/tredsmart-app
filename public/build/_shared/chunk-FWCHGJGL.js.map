{
  "version": 3,
  "sources": ["../../../app/helpers/auth.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/helpers/auth.ts\"\n);\nimport.meta.hot.lastModified = \"1738409028324.369\";\n}\n// REMIX HMR END\n\nimport { type Role } from \"@prisma/client\"\n\nimport { modelUser } from \"~/models/user.server\"\nimport { authService, type UserData } from \"~/services/auth.server\"\nimport { invariant } from \"~/utils/invariant\"\n\n/**\n * Require User\n *\n * Complete check by getting user from the database\n *\n * Quick check without getting user from the database is unnecessary,\n * because need to always check the user data availability\n *\n * Remix way to protect routes, can only be used server-side\n * https://remix.run/docs/en/main/pages/faq#md-how-can-i-have-a-parent-route-loader-validate-the-user-and-protect-all-child-routes\n *\n * Usage:\n * await requireUser(request, [\"ADMIN\", \"MANAGER\"])\n */\nexport async function requireUser(request: Request, expectedRoleSymbols?: Role[\"symbol\"][]) {\n  const userSession = await authService.isAuthenticated(request, {\n    failureRedirect: \"/login\",\n  })\n\n  const user = await modelUser.getForSession({ id: userSession.id })\n  invariant(user, \"User not found\")\n\n  const userIsAllowed = expectedRoleSymbols ? checkAllowance(expectedRoleSymbols, user) : true\n\n  return {\n    user,\n    userId: user.id,\n    userIsAllowed,\n  }\n}\n\n/**\n * Check Allowance\n *\n * This is a simple limited RBAC (Role Based Access Control) functionality\n * Can be used client-side or server-side\n */\nexport function checkAllowance(\n  expectedRoleSymbols: Role[\"symbol\"][],\n  userData?: UserData,\n): boolean {\n  if (!userData) return false\n\n  const foundRoles = expectedRoleSymbols.find(symbolToFind =>\n    userData.roles.find(role => role.symbol === symbolToFind),\n  )\n\n  return foundRoles ? true : false\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAaA,kBAA0B;AAC1B,kBAA2C;AAZ3C,IAAI,aAAa;AACjB,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EACA;AACA,cAAY,IAAI,eAAe;AAC/B;AA8CO,SAAS,eACd,qBACA,UACS;AACT,MAAI,CAAC;AAAU,WAAO;AAEtB,QAAM,aAAa,oBAAoB;AAAA,IAAK,kBAC1C,SAAS,MAAM,KAAK,UAAQ,KAAK,WAAW,YAAY;AAAA,EAC1D;AAEA,SAAO,aAAa,OAAO;AAC7B;",
  "names": []
}
