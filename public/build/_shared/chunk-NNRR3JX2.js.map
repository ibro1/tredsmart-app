{
  "version": 3,
  "sources": ["../../../app/hooks/use-root-loader-data.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/hooks/use-root-loader-data.tsx\"\n);\nimport.meta.hot.lastModified = \"1738409028328.369\";\n}\n// REMIX HMR END\n\nimport { useMatches } from \"@remix-run/react\"\nimport { useMemo } from \"react\"\n\nimport { type UserData, type UserSession } from \"~/services/auth.server\"\nimport { type parsedEnvClient } from \"~/utils/env.server\"\n\n// Only the essentials\ntype RootLoaderData = {\n  ENV: typeof parsedEnvClient\n  userSession: UserSession | undefined\n  userData: UserData | undefined\n}\n\nexport function useMatchesData(routeId: string) {\n  const matchingRoutes = useMatches()\n\n  const route = useMemo(\n    () => matchingRoutes.find(route => route.id === routeId),\n    [matchingRoutes, routeId],\n  )\n\n  return route?.data\n}\n\nexport function useRootLoaderData() {\n  const data = useMatchesData(\"root\") as RootLoaderData\n\n  // Keep them optionals, because need to handle in error boundary\n  return {\n    ENV: data?.ENV,\n    userSession: data?.userSession,\n    userData: data?.userData,\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAYA,IAAAA,gBAAwB;AAVxB,IAAI,aAAa;AACjB,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EACA;AACA,cAAY,IAAI,eAAe;AAC/B;AAgBO,SAAS,eAAe,SAAiB;AAC9C,QAAM,iBAAiB,WAAW;AAElC,QAAM,YAAQ;AAAA,IACZ,MAAM,eAAe,KAAK,CAAAC,WAASA,OAAM,OAAO,OAAO;AAAA,IACvD,CAAC,gBAAgB,OAAO;AAAA,EAC1B;AAEA,SAAO,OAAO;AAChB;AAEO,SAAS,oBAAoB;AAClC,QAAM,OAAO,eAAe,MAAM;AAGlC,SAAO;AAAA,IACL,KAAK,MAAM;AAAA,IACX,aAAa,MAAM;AAAA,IACnB,UAAU,MAAM;AAAA,EAClB;AACF;",
  "names": ["import_react", "route"]
}
