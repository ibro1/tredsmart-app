{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.0_bufferutil@4.0.9_encoding@0.1.13_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/index.js", "../../../node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.0_bufferutil@4.0.9_encoding@0.1.13_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/utils.js", "../../../node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.0_bufferutil@4.0.9_encoding@0.1.13_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/detectProvider.js", "../../../node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.0_bufferutil@4.0.9_encoding@0.1.13_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/standard/solana.js", "../../../node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.0_bufferutil@4.0.9_encoding@0.1.13_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/standard/account.js"],
  "sourcesContent": ["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { PublicKey, Transaction, VersionedTransaction } from '@solana/web3.js';\nimport EventEmitter from 'eventemitter3';\nimport bs58 from 'bs58';\nimport { v4 as uuidv4 } from 'uuid';\nimport { isLegacyTransactionInstance, serializeTransaction } from './utils';\nimport { detectProvider } from './detectProvider';\nimport { StandardSolflareMetaMaskWalletAccount } from './standard/account';\nimport { isSolanaChain } from './standard/solana';\nexport * from './types';\nexport * from './standard/account';\nclass SolflareMetaMask extends EventEmitter {\n    constructor(config) {\n        super();\n        this._network = 'mainnet-beta';\n        this._iframeParams = {};\n        this._element = null;\n        this._iframe = null;\n        this._publicKey = null;\n        this._account = null;\n        this._isConnected = false;\n        this._connectHandler = null;\n        this._messageHandlers = {};\n        this._handleEvent = (event) => {\n            var _a, _b;\n            switch (event.type) {\n                case 'connect': {\n                    this._collapseIframe();\n                    if ((_a = event.data) === null || _a === void 0 ? void 0 : _a.publicKey) {\n                        this._publicKey = event.data.publicKey;\n                        this._isConnected = true;\n                        if (this._connectHandler) {\n                            this._connectHandler.resolve();\n                            this._connectHandler = null;\n                        }\n                        this._connected();\n                    }\n                    else {\n                        if (this._connectHandler) {\n                            this._connectHandler.reject();\n                            this._connectHandler = null;\n                        }\n                        this._disconnected();\n                    }\n                    return;\n                }\n                case 'disconnect': {\n                    if (this._connectHandler) {\n                        this._connectHandler.reject();\n                        this._connectHandler = null;\n                    }\n                    this._disconnected();\n                    return;\n                }\n                case 'accountChanged': {\n                    if ((_b = event.data) === null || _b === void 0 ? void 0 : _b.publicKey) {\n                        this._publicKey = event.data.publicKey;\n                        this.emit('accountChanged', this.publicKey);\n                        this._standardConnected();\n                    }\n                    else {\n                        this.emit('accountChanged', undefined);\n                        this._standardDisconnected();\n                    }\n                    return;\n                }\n                default: {\n                    return;\n                }\n            }\n        };\n        this._handleResize = (data) => {\n            if (data.resizeMode === 'full') {\n                if (data.params.mode === 'fullscreen') {\n                    this._expandIframe();\n                }\n                else if (data.params.mode === 'hide') {\n                    this._collapseIframe();\n                }\n            }\n            else if (data.resizeMode === 'coordinates') {\n                this._resizeIframe(data.params);\n            }\n        };\n        this._handleMessage = (event) => {\n            var _a;\n            if (((_a = event.data) === null || _a === void 0 ? void 0 : _a.channel) !== 'solflareIframeToWalletAdapter') {\n                return;\n            }\n            const data = event.data.data || {};\n            if (data.type === 'event') {\n                this._handleEvent(data.event);\n            }\n            else if (data.type === 'resize') {\n                this._handleResize(data);\n            }\n            else if (data.type === 'response') {\n                if (this._messageHandlers[data.id]) {\n                    const { resolve, reject } = this._messageHandlers[data.id];\n                    delete this._messageHandlers[data.id];\n                    if (data.error) {\n                        reject(data.error);\n                    }\n                    else {\n                        resolve(data.result);\n                    }\n                }\n            }\n        };\n        this._removeElement = () => {\n            if (this._element) {\n                this._element.remove();\n                this._element = null;\n            }\n        };\n        this._removeDanglingElements = () => {\n            const elements = document.getElementsByClassName('solflare-metamask-wallet-adapter-iframe');\n            for (const element of elements) {\n                if (element.parentElement) {\n                    element.remove();\n                }\n            }\n        };\n        this._injectElement = () => {\n            this._removeElement();\n            this._removeDanglingElements();\n            const params = Object.assign(Object.assign({}, this._iframeParams), { mm: true, v: 1, cluster: this._network || 'mainnet-beta', origin: window.location.origin || '', title: document.title || '' });\n            const queryString = Object.keys(params)\n                .map((key) => `${key}=${encodeURIComponent(params[key])}`)\n                .join('&');\n            const iframeUrl = `${SolflareMetaMask.IFRAME_URL}?${queryString}`;\n            this._element = document.createElement('div');\n            this._element.className = 'solflare-metamask-wallet-adapter-iframe';\n            this._element.innerHTML = `\n      <iframe src='${iframeUrl}' style='position: fixed; top: 0; bottom: 0; left: 0; right: 0; width: 100%; height: 100%; border: none; border-radius: 0; z-index: 99999; color-scheme: auto;' allowtransparency='true'></iframe>\n    `;\n            document.body.appendChild(this._element);\n            this._iframe = this._element.querySelector('iframe');\n            window.addEventListener('message', this._handleMessage, false);\n        };\n        this._collapseIframe = () => {\n            if (this._iframe) {\n                this._iframe.style.top = '';\n                this._iframe.style.right = '';\n                this._iframe.style.height = '2px';\n                this._iframe.style.width = '2px';\n            }\n        };\n        this._expandIframe = () => {\n            if (this._iframe) {\n                this._iframe.style.top = '0px';\n                this._iframe.style.bottom = '0px';\n                this._iframe.style.left = '0px';\n                this._iframe.style.right = '0px';\n                this._iframe.style.width = '100%';\n                this._iframe.style.height = '100%';\n            }\n        };\n        this._resizeIframe = (params) => {\n            if (!this._iframe) {\n                return;\n            }\n            this._iframe.style.top = isFinite(params.top) ? `${params.top}px` : '';\n            this._iframe.style.bottom = isFinite(params.bottom) ? `${params.bottom}px` : '';\n            this._iframe.style.left = isFinite(params.left) ? `${params.left}px` : '';\n            this._iframe.style.right = isFinite(params.right) ? `${params.right}px` : '';\n            this._iframe.style.width = isFinite(params.width)\n                ? `${params.width}px`\n                : params.width;\n            this._iframe.style.height = isFinite(params.height)\n                ? `${params.height}px`\n                : params.height;\n        };\n        this._sendIframeMessage = (data) => {\n            if (!this.connected || !this.publicKey) {\n                throw new Error('Wallet not connected');\n            }\n            return new Promise((resolve, reject) => {\n                var _a, _b;\n                const messageId = uuidv4();\n                this._messageHandlers[messageId] = { resolve, reject };\n                (_b = (_a = this._iframe) === null || _a === void 0 ? void 0 : _a.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage({\n                    channel: 'solflareWalletAdapterToIframe',\n                    data: Object.assign({ id: messageId }, data)\n                }, '*');\n            });\n        };\n        this._connected = () => {\n            this._isConnected = true;\n            this.emit('connect', this.publicKey);\n            this._standardConnected();\n        };\n        this._disconnected = () => {\n            this._publicKey = null;\n            this._isConnected = false;\n            window.removeEventListener('message', this._handleMessage, false);\n            this._removeElement();\n            this.emit('disconnect');\n            this._standardDisconnected();\n        };\n        this._standardConnected = () => {\n            if (!this.publicKey) {\n                return;\n            }\n            const address = this.publicKey.toString();\n            if (!this._account || this._account.address !== address) {\n                this._account = new StandardSolflareMetaMaskWalletAccount({\n                    address,\n                    publicKey: this.publicKey.toBytes()\n                });\n                this.emit('standard_change', { accounts: this.standardAccounts });\n            }\n        };\n        this._standardDisconnected = () => {\n            if (this._account) {\n                this._account = null;\n                this.emit('standard_change', { accounts: this.standardAccounts });\n            }\n        };\n        if (config === null || config === void 0 ? void 0 : config.network) {\n            this._network = config === null || config === void 0 ? void 0 : config.network;\n        }\n        if (window.SolflareMetaMaskParams) {\n            this._iframeParams = Object.assign(Object.assign({}, this._iframeParams), window.SolflareMetaMaskParams);\n        }\n        if (config === null || config === void 0 ? void 0 : config.params) {\n            this._iframeParams = Object.assign(Object.assign({}, this._iframeParams), config === null || config === void 0 ? void 0 : config.params);\n        }\n    }\n    get publicKey() {\n        return this._publicKey ? new PublicKey(this._publicKey) : null;\n    }\n    get standardAccount() {\n        return this._account;\n    }\n    get standardAccounts() {\n        return this._account ? [this._account] : [];\n    }\n    get isConnected() {\n        return this._isConnected;\n    }\n    get connected() {\n        return this.isConnected;\n    }\n    get autoApprove() {\n        return false;\n    }\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.connected) {\n                return;\n            }\n            this._injectElement();\n            yield new Promise((resolve, reject) => {\n                this._connectHandler = { resolve, reject };\n            });\n        });\n    }\n    disconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._sendIframeMessage({\n                method: 'disconnect'\n            });\n            this._disconnected();\n        });\n    }\n    signTransaction(transaction) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.connected || !this.publicKey) {\n                throw new Error('Wallet not connected');\n            }\n            try {\n                const serializedTransaction = serializeTransaction(transaction);\n                const response = yield this._sendIframeMessage({\n                    method: 'signTransactionV2',\n                    params: {\n                        transaction: bs58.encode(serializedTransaction)\n                    }\n                });\n                const { transaction: signedTransaction } = response;\n                return isLegacyTransactionInstance(transaction) ? Transaction.from(bs58.decode(signedTransaction)) : VersionedTransaction.deserialize(bs58.decode(signedTransaction));\n            }\n            catch (e) {\n                throw new Error(((_a = e === null || e === void 0 ? void 0 : e.toString) === null || _a === void 0 ? void 0 : _a.call(e)) || 'Failed to sign transaction');\n            }\n        });\n    }\n    signAllTransactions(transactions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.connected || !this.publicKey) {\n                throw new Error('Wallet not connected');\n            }\n            try {\n                const serializedTransactions = transactions.map((transaction) => serializeTransaction(transaction));\n                const { transactions: signedTransactions } = yield this._sendIframeMessage({\n                    method: 'signAllTransactionsV2',\n                    params: {\n                        transactions: serializedTransactions.map((transaction) => bs58.encode(transaction))\n                    }\n                });\n                return signedTransactions.map((signedTransaction, index) => {\n                    return isLegacyTransactionInstance(transactions[index]) ? Transaction.from(bs58.decode(signedTransaction)) : VersionedTransaction.deserialize(bs58.decode(signedTransaction));\n                });\n            }\n            catch (e) {\n                throw new Error(((_a = e === null || e === void 0 ? void 0 : e.toString) === null || _a === void 0 ? void 0 : _a.call(e)) || 'Failed to sign transactions');\n            }\n        });\n    }\n    signAndSendTransaction(transaction, options) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.connected || !this.publicKey) {\n                throw new Error('Wallet not connected');\n            }\n            try {\n                const serializedTransaction = serializeTransaction(transaction);\n                const { signature } = yield this._sendIframeMessage({\n                    method: 'signAndSendTransaction',\n                    params: {\n                        transaction: bs58.encode(serializedTransaction),\n                        options\n                    }\n                });\n                return signature;\n            }\n            catch (e) {\n                throw new Error(((_a = e === null || e === void 0 ? void 0 : e.toString) === null || _a === void 0 ? void 0 : _a.call(e)) || 'Failed to sign and send transaction');\n            }\n        });\n    }\n    signMessage(data, display = 'utf8') {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.connected || !this.publicKey) {\n                throw new Error('Wallet not connected');\n            }\n            try {\n                const { signature } = yield this._sendIframeMessage({\n                    method: 'signMessage',\n                    params: {\n                        data: bs58.encode(data),\n                        display\n                    }\n                });\n                return Uint8Array.from(bs58.decode(signature));\n            }\n            catch (e) {\n                throw new Error(((_a = e === null || e === void 0 ? void 0 : e.toString) === null || _a === void 0 ? void 0 : _a.call(e)) || 'Failed to sign message');\n            }\n        });\n    }\n    sign(data, display = 'utf8') {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.signMessage(data, display);\n        });\n    }\n    static isSupported() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const provider = yield detectProvider();\n            return !!provider;\n        });\n    }\n    standardSignAndSendTransaction(...inputs) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.connected)\n                throw new Error('not connected');\n            const outputs = [];\n            if (inputs.length === 1) {\n                const { transaction, account, chain, options } = inputs[0];\n                const { minContextSlot, preflightCommitment, skipPreflight, maxRetries } = options || {};\n                if (account !== this._account)\n                    throw new Error('invalid account');\n                if (!isSolanaChain(chain))\n                    throw new Error('invalid chain');\n                const signature = yield this.signAndSendTransaction(VersionedTransaction.deserialize(transaction), {\n                    preflightCommitment,\n                    minContextSlot,\n                    maxRetries,\n                    skipPreflight\n                });\n                outputs.push({ signature: bs58.decode(signature) });\n            }\n            else if (inputs.length > 1) {\n                for (const input of inputs) {\n                    outputs.push(...(yield this.standardSignAndSendTransaction(input)));\n                }\n            }\n            return outputs;\n        });\n    }\n    standardSignTransaction(...inputs) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.connected)\n                throw new Error('not connected');\n            const outputs = [];\n            if (inputs.length === 1) {\n                const { transaction, account, chain } = inputs[0];\n                if (account !== this._account)\n                    throw new Error('invalid account');\n                if (chain && !isSolanaChain(chain))\n                    throw new Error('invalid chain');\n                const signedTransaction = yield this.signTransaction(VersionedTransaction.deserialize(transaction));\n                outputs.push({ signedTransaction: signedTransaction.serialize() });\n            }\n            else if (inputs.length > 1) {\n                let chain;\n                for (const input of inputs) {\n                    if (input.account !== this._account)\n                        throw new Error('invalid account');\n                    if (input.chain) {\n                        if (!isSolanaChain(input.chain))\n                            throw new Error('invalid chain');\n                        if (chain) {\n                            if (input.chain !== chain)\n                                throw new Error('conflicting chain');\n                        }\n                        else {\n                            chain = input.chain;\n                        }\n                    }\n                }\n                const transactions = inputs.map(({ transaction }) => VersionedTransaction.deserialize(transaction));\n                const signedTransactions = yield this.signAllTransactions(transactions);\n                outputs.push(...signedTransactions.map((signedTransaction) => ({\n                    signedTransaction: signedTransaction.serialize()\n                })));\n            }\n            return outputs;\n        });\n    }\n    standardSignMessage(...inputs) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.connected)\n                throw new Error('not connected');\n            const outputs = [];\n            if (inputs.length === 1) {\n                const { message, account } = inputs[0];\n                if (account !== this._account)\n                    throw new Error('invalid account');\n                const signature = yield this.signMessage(message);\n                outputs.push({ signedMessage: message, signature });\n            }\n            else if (inputs.length > 1) {\n                for (const input of inputs) {\n                    outputs.push(...(yield this.standardSignMessage(input)));\n                }\n            }\n            return outputs;\n        });\n    }\n}\nSolflareMetaMask.IFRAME_URL = 'https://widget.solflare.com/';\nexport default SolflareMetaMask;\n", "export function isLegacyTransactionInstance(transaction) {\n    return transaction.version === undefined;\n}\nexport function serializeTransaction(transaction) {\n    return isLegacyTransactionInstance(transaction)\n        ? transaction.serialize({\n            verifySignatures: false,\n            requireAllSignatures: false\n        })\n        : transaction.serialize();\n}\nexport function serializeTransactionMessage(transaction) {\n    return isLegacyTransactionInstance(transaction)\n        ? transaction.serializeMessage()\n        : transaction.message.serialize();\n}\nexport function addSignature(transaction, publicKey, signature) {\n    if (isLegacyTransactionInstance(transaction)) {\n        transaction.addSignature(publicKey, Buffer.from(signature));\n    }\n    else {\n        const signerPubkeys = transaction.message.staticAccountKeys.slice(0, transaction.message.header.numRequiredSignatures);\n        const signerIndex = signerPubkeys.findIndex((pubkey) => pubkey.equals(publicKey));\n        if (signerIndex >= 0) {\n            transaction.signatures[signerIndex] = signature;\n        }\n    }\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport function isSnapSupported(provider) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            yield provider.request({ method: 'wallet_getSnaps' });\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    });\n}\nexport function detectProvider() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const provider = window.ethereum;\n            if (!provider) {\n                return null;\n            }\n            if (provider.providers && Array.isArray(provider.providers)) {\n                const providers = provider.providers;\n                for (const provider of providers) {\n                    if (yield isSnapSupported(provider)) {\n                        return provider;\n                    }\n                }\n            }\n            if (provider.detected && Array.isArray(provider.detected)) {\n                const providers = provider.detected;\n                for (const provider of providers) {\n                    if (yield isSnapSupported(provider)) {\n                        return provider;\n                    }\n                }\n            }\n            if (yield isSnapSupported(provider)) {\n                return provider;\n            }\n            return null;\n        }\n        catch (error) {\n            console.error(error);\n            return null;\n        }\n    });\n}\n", "// This is copied from @solana/wallet-standard-chains\n/** Solana Mainnet (beta) cluster, e.g. https://api.mainnet-beta.solana.com */\nexport const SOLANA_MAINNET_CHAIN = 'solana:mainnet';\n/** Solana Devnet cluster, e.g. https://api.devnet.solana.com */\nexport const SOLANA_DEVNET_CHAIN = 'solana:devnet';\n/** Solana Testnet cluster, e.g. https://api.testnet.solana.com */\nexport const SOLANA_TESTNET_CHAIN = 'solana:testnet';\n/** Solana Localnet cluster, e.g. http://localhost:8899 */\nexport const SOLANA_LOCALNET_CHAIN = 'solana:localnet';\n/** Array of all Solana clusters */\nexport const SOLANA_CHAINS = [\n    SOLANA_MAINNET_CHAIN,\n    SOLANA_DEVNET_CHAIN,\n    SOLANA_TESTNET_CHAIN,\n    SOLANA_LOCALNET_CHAIN\n];\n/**\n * Check if a chain corresponds with one of the Solana clusters.\n */\nexport function isSolanaChain(chain) {\n    return SOLANA_CHAINS.includes(chain);\n}\n", "// This is copied with modification from @wallet-standard/wallet\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _StandardSolflareMetaMaskWalletAccount_address, _StandardSolflareMetaMaskWalletAccount_publicKey, _StandardSolflareMetaMaskWalletAccount_chains, _StandardSolflareMetaMaskWalletAccount_features, _StandardSolflareMetaMaskWalletAccount_label, _StandardSolflareMetaMaskWalletAccount_icon;\nimport { SolanaSignAndSendTransaction, SolanaSignMessage, SolanaSignTransaction } from '@solana/wallet-standard-features';\nimport { SOLANA_CHAINS } from './solana.js';\nconst chains = SOLANA_CHAINS;\nconst features = [SolanaSignAndSendTransaction, SolanaSignTransaction, SolanaSignMessage];\nexport class StandardSolflareMetaMaskWalletAccount {\n    get address() {\n        return __classPrivateFieldGet(this, _StandardSolflareMetaMaskWalletAccount_address, \"f\");\n    }\n    get publicKey() {\n        return __classPrivateFieldGet(this, _StandardSolflareMetaMaskWalletAccount_publicKey, \"f\").slice();\n    }\n    get chains() {\n        return __classPrivateFieldGet(this, _StandardSolflareMetaMaskWalletAccount_chains, \"f\").slice();\n    }\n    get features() {\n        return __classPrivateFieldGet(this, _StandardSolflareMetaMaskWalletAccount_features, \"f\").slice();\n    }\n    get label() {\n        return __classPrivateFieldGet(this, _StandardSolflareMetaMaskWalletAccount_label, \"f\");\n    }\n    get icon() {\n        return __classPrivateFieldGet(this, _StandardSolflareMetaMaskWalletAccount_icon, \"f\");\n    }\n    constructor({ address, publicKey, label, icon }) {\n        _StandardSolflareMetaMaskWalletAccount_address.set(this, void 0);\n        _StandardSolflareMetaMaskWalletAccount_publicKey.set(this, void 0);\n        _StandardSolflareMetaMaskWalletAccount_chains.set(this, void 0);\n        _StandardSolflareMetaMaskWalletAccount_features.set(this, void 0);\n        _StandardSolflareMetaMaskWalletAccount_label.set(this, void 0);\n        _StandardSolflareMetaMaskWalletAccount_icon.set(this, void 0);\n        if (new.target === StandardSolflareMetaMaskWalletAccount) {\n            Object.freeze(this);\n        }\n        __classPrivateFieldSet(this, _StandardSolflareMetaMaskWalletAccount_address, address, \"f\");\n        __classPrivateFieldSet(this, _StandardSolflareMetaMaskWalletAccount_publicKey, publicKey, \"f\");\n        __classPrivateFieldSet(this, _StandardSolflareMetaMaskWalletAccount_chains, chains, \"f\");\n        __classPrivateFieldSet(this, _StandardSolflareMetaMaskWalletAccount_features, features, \"f\");\n        __classPrivateFieldSet(this, _StandardSolflareMetaMaskWalletAccount_label, label, \"f\");\n        __classPrivateFieldSet(this, _StandardSolflareMetaMaskWalletAccount_icon, icon, \"f\");\n    }\n}\n_StandardSolflareMetaMaskWalletAccount_address = new WeakMap(), _StandardSolflareMetaMaskWalletAccount_publicKey = new WeakMap(), _StandardSolflareMetaMaskWalletAccount_chains = new WeakMap(), _StandardSolflareMetaMaskWalletAccount_features = new WeakMap(), _StandardSolflareMetaMaskWalletAccount_label = new WeakMap(), _StandardSolflareMetaMaskWalletAccount_icon = new WeakMap();\n"],
  "mappings": "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",
  "names": ["provider", "__awaiter", "bs58"]
}
