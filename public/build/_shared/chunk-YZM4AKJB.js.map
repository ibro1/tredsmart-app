{
  "version": 3,
  "sources": ["../../../app/schemas/user.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/schemas/user.ts\"\n);\nimport.meta.hot.lastModified = \"1738409028328.369\";\n}\n// REMIX HMR END\n\nimport { z } from \"zod\"\n\nimport { id, redirectTo } from \"~/schemas/general\"\n\nconst email = z.string({ required_error: \"Email is required\" }).min(1).email(\"This is not an email\")\n\nconst username = z\n  .string({ required_error: \"Username is required\" })\n  .regex(/^[a-zA-Z0-9_]+$/, \"Only alphabet, number, underscore allowed\")\n  .min(4, \"Username require at least 4 characters\")\n  .max(20, \"Username limited to 20 characters\")\n\nconst fullname = z\n  .string({ required_error: \"Full name is required\" })\n  .min(1)\n  .max(50, \"Full name limited to 50 characters\")\n\nconst nickname = z.string().max(50, \"Nick name limited to 50 characters\")\n\n/**\n * Potential improvement:\n * - Shouldn't match the email\n * - Not only numbers\n */\nconst password = z\n  .string({ required_error: \"Password is required\" })\n  .min(8, \"Password at least 8 characters\")\n  .max(100, \"Password max of 100 characters\")\nconst confirmPassword = z.string()\nconst currentPassword = z.string({ required_error: \"Current password is required\" }).min(1)\n\nconst remember = z.boolean().optional()\n\nconst roleSymbol = z.string().min(1, \"Role is required\")\n\nconst tag = z.object({ id, symbol: z.string().optional() })\n\nconst tags = z.array(tag).optional()\n\nconst modeName = z.string().min(1, \"Profile mode name is required\")\n\nconst headline = z.string().max(50, \"Headline limited to 50 characters\")\n\nconst bio = z.string().max(1000, \"Bio limited to 1000 characters\").optional()\n\nconst link = z.object({\n  url: z.string().url({ message: \"Please enter a valid URL.\" }),\n  text: z.string().optional(),\n})\nconst links = z.array(link).optional()\n\nexport const schemaLink = link\nexport const schemaLinks = links\n\nexport const schemaUserSignUp = z.object({\n  fullname,\n  username,\n  email,\n  password,\n  remember,\n})\n\nexport const schemaUserLogIn = z.object({\n  email,\n  password,\n  remember,\n  redirectTo,\n})\n\nexport const schemaUserUsername = z.object({ id, username })\nexport const schemaUserFullName = z.object({ id, fullname })\nexport const schemaUserNickName = z.object({ id, nickname })\nexport const schemaUserEmail = z.object({ id, email })\n\nexport const schemaUserProfileModeName = z.object({ id, modeName })\nexport const schemaUserProfileHeadline = z.object({ id, headline })\nexport const schemaUserProfileBio = z.object({ id, bio })\nexport const schemaUserProfileLinks = z.object({ id, links })\n\nexport const schemaUserPassword = z\n  .object({\n    id,\n    currentPassword,\n    password,\n    confirmPassword,\n  })\n  .superRefine(({ password, confirmPassword }, ctx) => {\n    if (password !== confirmPassword) {\n      ctx.addIssue({\n        path: [\"confirmPassword\"],\n        code: \"custom\",\n        message: \"The passwords did not match\",\n      })\n    }\n  })\n\nexport const schemaUserUpdateTags = z.object({\n  id,\n  tags,\n})\n\nexport const schemaRootUserUpdate = z.object({\n  id,\n  email,\n  username,\n  fullname,\n  nickname,\n  links,\n  roleSymbol,\n})\n\nexport const issueUsernameUnallowed = {\n  path: [\"username\"],\n  code: z.ZodIssueCode.custom,\n  message: \"Username is not allowed, please change\",\n}\n"],
  "mappings": "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",
  "names": ["password", "confirmPassword"]
}
