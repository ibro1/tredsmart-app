import { timerify } from '../../util/Performance.js';
import { hasDependency, load } from '../../util/plugin.js';
import { toEntryPattern } from '../../util/protocols.js';
export const NAME = 'Mocha';
export const ENABLERS = ['mocha'];
export const isEnabled = ({ dependencies }) => hasDependency(dependencies, ENABLERS);
export const CONFIG_FILE_PATTERNS = ['.mocharc.{js,cjs,json,jsonc,yml,yaml}', 'package.json'];
export const ENTRY_FILE_PATTERNS = ['**/test/*.{js,cjs,mjs}'];
const findMochaDependencies = async (configFilePath, options) => {
    const { config, manifest, isProduction } = options;
    const localConfig = configFilePath.endsWith('package.json')
        ? manifest.mocha
        : await load(configFilePath);
    const entryPatterns = (config.entry ?? (localConfig?.spec ? [localConfig.spec].flat() : ENTRY_FILE_PATTERNS)).map(toEntryPattern);
    if (isProduction || !localConfig)
        return entryPatterns;
    const require = localConfig.require ? [localConfig.require].flat() : [];
    return [...require, ...entryPatterns];
};
export const findDependencies = timerify(findMochaDependencies);
