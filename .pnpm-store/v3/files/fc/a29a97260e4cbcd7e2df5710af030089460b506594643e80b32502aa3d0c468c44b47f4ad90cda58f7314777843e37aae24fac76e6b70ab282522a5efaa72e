{"version":3,"file":"index.server.js","sources":["../../src/index.server.ts"],"sourcesContent":["import type { NodeOptions } from '@sentry/node';\nimport { getClient } from '@sentry/node';\nimport { getCurrentScope, init as nodeInit } from '@sentry/node';\nimport { logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from './utils/debug-build';\nimport { instrumentServer } from './utils/instrumentServer';\nimport { buildMetadata } from './utils/metadata';\nimport type { RemixOptions } from './utils/remixOptions';\n\n// We need to explicitly export @sentry/node as they end up under `default` in ESM builds\n// See: https://github.com/getsentry/sentry-javascript/issues/8474\nexport {\n  // eslint-disable-next-line deprecation/deprecation\n  addGlobalEventProcessor,\n  addEventProcessor,\n  addBreadcrumb,\n  captureCheckIn,\n  withMonitor,\n  captureException,\n  captureEvent,\n  captureMessage,\n  // eslint-disable-next-line deprecation/deprecation\n  configureScope,\n  createTransport,\n  // eslint-disable-next-line deprecation/deprecation\n  extractTraceparentData,\n  getActiveTransaction,\n  getHubFromCarrier,\n  getCurrentHub,\n  Hub,\n  makeMain,\n  Scope,\n  startTransaction,\n  SDK_VERSION,\n  setContext,\n  setExtra,\n  setExtras,\n  setTag,\n  setTags,\n  setUser,\n  spanStatusfromHttpCode,\n  // eslint-disable-next-line deprecation/deprecation\n  trace,\n  withScope,\n  autoDiscoverNodePerformanceMonitoringIntegrations,\n  makeNodeTransport,\n  defaultIntegrations,\n  defaultStackParser,\n  // eslint-disable-next-line deprecation/deprecation\n  lastEventId,\n  flush,\n  close,\n  getSentryRelease,\n  addRequestDataToEvent,\n  DEFAULT_USER_INCLUDES,\n  extractRequestData,\n  // eslint-disable-next-line deprecation/deprecation\n  deepReadDirSync,\n  Integrations,\n  Handlers,\n  cron,\n} from '@sentry/node';\n\n// Keeping the `*` exports for backwards compatibility and types\nexport * from '@sentry/node';\n\nexport { captureRemixServerException, wrapRemixHandleError } from './utils/instrumentServer';\nexport { ErrorBoundary, withErrorBoundary } from '@sentry/react';\nexport { remixRouterInstrumentation, withSentry } from './client/performance';\nexport { captureRemixErrorBoundaryError } from './client/errors';\nexport { wrapExpressCreateRequestHandler } from './utils/serverAdapters/express';\n\nexport type { SentryMetaArgs } from './utils/types';\n\nfunction sdkAlreadyInitialized(): boolean {\n  return !!getClient();\n}\n\n/** Initializes Sentry Remix SDK on Node. */\nexport function init(options: RemixOptions): void {\n  buildMetadata(options, ['remix', 'node']);\n\n  if (sdkAlreadyInitialized()) {\n    DEBUG_BUILD && logger.log('SDK already initialized');\n\n    return;\n  }\n\n  instrumentServer();\n\n  nodeInit(options as NodeOptions);\n\n  getCurrentScope().setTag('runtime', 'node');\n}\n"],"names":["nodeInit"],"mappings":";;;;;;;;;;;;;AA2EA,SAAS,qBAAqB,GAAY;AAC1C,EAAE,OAAO,CAAC,CAAC,SAAS,EAAE,CAAA;AACtB,CAAA;AACA;AACA;AACO,SAAS,IAAI,CAAC,OAAO,EAAsB;AAClD,EAAE,aAAa,CAAC,OAAO,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAA;AAC3C;AACA,EAAE,IAAI,qBAAqB,EAAE,EAAE;AAC/B,IAAI,eAAe,MAAM,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAA;AACxD;AACA,IAAI,OAAM;AACV,GAAE;AACF;AACA,EAAE,gBAAgB,EAAE,CAAA;AACpB;AACA,EAAEA,MAAQ,CAAC,OAAA,EAAuB,CAAA;AAClC;AACA,EAAE,eAAe,EAAE,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,CAAA;AAC7C;;;;"}