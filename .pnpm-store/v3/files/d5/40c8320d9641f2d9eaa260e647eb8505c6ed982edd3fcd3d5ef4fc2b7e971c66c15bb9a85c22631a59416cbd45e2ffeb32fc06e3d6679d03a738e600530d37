import { timerify } from '../../util/Performance.js';
import { hasDependency, load } from '../../util/plugin.js';
import { toEntryPattern } from '../../util/protocols.js';
export const NAME = 'tsup';
export const ENABLERS = ['tsup'];
export const isEnabled = ({ dependencies }) => hasDependency(dependencies, ENABLERS);
export const CONFIG_FILE_PATTERNS = ['tsup.config.js'];
const findTsupDependencies = async (configFilePath) => {
    let localConfig = await load(configFilePath);
    if (typeof localConfig === 'function')
        localConfig = await localConfig({});
    if (!localConfig)
        return [];
    const entryPatterns = [localConfig].flat().flatMap(config => {
        if (!config.entry)
            return [];
        if (Array.isArray(config.entry))
            return config.entry.map(toEntryPattern);
        return Object.values(config.entry).map(toEntryPattern);
    });
    return entryPatterns;
};
export const findDependencies = timerify(findTsupDependencies);
