export * from './exports';
declare const INTEGRATIONS: {
    GlobalHandlers: import("@sentry/types").Integration & {
        new (...args: any[]): import("@sentry/types").Integration & import("@sentry/types").IntegrationFnResult & {
            setupOnce: (addGlobalEventProcessor?: ((callback: import("@sentry/types").EventProcessor) => void) | undefined, getCurrentHub?: (() => import("@sentry/types").Hub) | undefined) => void;
        };
        id: string;
    };
    TryCatch: import("@sentry/types").Integration & {
        new (...args: any[]): import("@sentry/types").Integration & import("@sentry/types").IntegrationFnResult & {
            setupOnce: (addGlobalEventProcessor?: ((callback: import("@sentry/types").EventProcessor) => void) | undefined, getCurrentHub?: (() => import("@sentry/types").Hub) | undefined) => void;
        };
        id: string;
    };
    Breadcrumbs: import("@sentry/types").Integration & {
        new (...args: any[]): import("@sentry/types").Integration & import("@sentry/types").IntegrationFnResult & {
            setupOnce: (addGlobalEventProcessor?: ((callback: import("@sentry/types").EventProcessor) => void) | undefined, getCurrentHub?: (() => import("@sentry/types").Hub) | undefined) => void;
        };
        id: string;
    };
    LinkedErrors: import("@sentry/types").Integration & {
        new (...args: any[]): import("@sentry/types").Integration & import("@sentry/types").IntegrationFnResult & {
            setupOnce: (addGlobalEventProcessor?: ((callback: import("@sentry/types").EventProcessor) => void) | undefined, getCurrentHub?: (() => import("@sentry/types").Hub) | undefined) => void;
        };
        id: string;
    };
    HttpContext: import("@sentry/types").Integration & {
        new (...args: any[]): import("@sentry/types").Integration & import("@sentry/types").IntegrationFnResult & {
            setupOnce: (addGlobalEventProcessor?: ((callback: import("@sentry/types").EventProcessor) => void) | undefined, getCurrentHub?: (() => import("@sentry/types").Hub) | undefined) => void;
        };
        id: string;
    };
    Dedupe: import("@sentry/types").Integration & {
        new (...args: any[]): import("@sentry/types").Integration & import("@sentry/types").IntegrationFnResult & {
            setupOnce: (addGlobalEventProcessor?: ((callback: import("@sentry/types").EventProcessor) => void) | undefined, getCurrentHub?: (() => import("@sentry/types").Hub) | undefined) => void;
        };
        id: string;
    };
    FunctionToString: import("@sentry/types").Integration & {
        new (...args: any[]): import("@sentry/types").Integration & import("@sentry/types").IntegrationFnResult & {
            setupOnce: (addGlobalEventProcessor?: ((callback: import("@sentry/types").EventProcessor) => void) | undefined, getCurrentHub?: (() => import("@sentry/types").Hub) | undefined) => void;
        };
        id: string;
    };
    InboundFilters: import("@sentry/types").Integration & {
        new (...args: any[]): import("@sentry/types").Integration & import("@sentry/types").IntegrationFnResult & {
            setupOnce: (addGlobalEventProcessor?: ((callback: import("@sentry/types").EventProcessor) => void) | undefined, getCurrentHub?: (() => import("@sentry/types").Hub) | undefined) => void;
        };
        id: string;
    };
};
export { INTEGRATIONS as Integrations };
export { Replay } from '@sentry/replay';
export type { ReplayEventType, ReplayEventWithTime, ReplayBreadcrumbFrame, ReplayBreadcrumbFrameEvent, ReplayOptionFrameEvent, ReplayFrame, ReplayFrameEvent, ReplaySpanFrame, ReplaySpanFrameEvent, } from '@sentry/replay';
export { Feedback } from '@sentry-internal/feedback';
export { BrowserTracing, defaultRequestInstrumentationOptions, instrumentOutgoingRequests, } from '@sentry-internal/tracing';
export type { RequestInstrumentationOptions } from '@sentry-internal/tracing';
export { addTracingExtensions, setMeasurement, extractTraceparentData, getActiveTransaction, spanStatusfromHttpCode, trace, makeMultiplexedTransport, ModuleMetadata, } from '@sentry/core';
export type { SpanStatusType } from '@sentry/core';
export type { Span } from '@sentry/types';
export { makeBrowserOfflineTransport } from './transports/offline';
export { onProfilingStartRouteTransaction } from './profiling/hubextensions';
export { BrowserProfilingIntegration } from './profiling/integration';
//# sourceMappingURL=index.d.ts.map