import { existsSync } from 'node:fs';
import { isBuiltin } from 'node:module';
import ts from 'typescript';
import { sanitizeSpecifier } from '../util/modules.js';
import { dirname, extname, isAbsolute, isInternal, join } from '../util/path.js';
import { isDeclarationFileExtension } from './ast-helpers.js';
import { ensureRealFilePath, isVirtualFilePath } from './utils.js';
const resolutionCache = new Map();
const fileExists = (name, containingFile) => {
    const resolvedFileName = isAbsolute(name) ? name : join(dirname(containingFile), name);
    if (existsSync(resolvedFileName)) {
        return {
            resolvedFileName,
            extension: extname(name),
            isExternalLibraryImport: false,
            resolvedUsingTsExtension: false,
        };
    }
};
export function createCustomModuleResolver(customSys, compilerOptions, virtualFileExtensions) {
    function resolveModuleNames(moduleNames, containingFile) {
        return moduleNames.map(moduleName => {
            const key = `${containingFile}:${moduleName}`;
            if (resolutionCache.has(key))
                return resolutionCache.get(key);
            const resolvedModule = resolveModuleName(moduleName, containingFile);
            resolutionCache.set(key, resolvedModule);
            return resolvedModule;
        });
    }
    function resolveModuleName(name, containingFile) {
        const sanitizedSpecifier = sanitizeSpecifier(name);
        if (isBuiltin(sanitizedSpecifier))
            return undefined;
        const tsResolvedModule = ts.resolveModuleName(sanitizedSpecifier, containingFile, compilerOptions, ts.sys).resolvedModule;
        if (!tsResolvedModule) {
            const extension = extname(sanitizedSpecifier);
            if (extension && !virtualFileExtensions.includes(extension)) {
                const module = fileExists(sanitizedSpecifier, containingFile);
                if (module)
                    return module;
            }
        }
        if (tsResolvedModule &&
            isDeclarationFileExtension(tsResolvedModule?.extension) &&
            isInternal(tsResolvedModule.resolvedFileName)) {
            const module = fileExists(sanitizedSpecifier, containingFile);
            if (module)
                return module;
        }
        if (virtualFileExtensions.length === 0)
            return tsResolvedModule;
        if (tsResolvedModule && !isVirtualFilePath(tsResolvedModule.resolvedFileName, virtualFileExtensions)) {
            return tsResolvedModule;
        }
        const customResolvedModule = ts.resolveModuleName(name, containingFile, compilerOptions, customSys).resolvedModule;
        if (!customResolvedModule || !isVirtualFilePath(customResolvedModule.resolvedFileName, virtualFileExtensions)) {
            return customResolvedModule;
        }
        const resolvedFileName = ensureRealFilePath(customResolvedModule.resolvedFileName, virtualFileExtensions);
        const resolvedModule = {
            extension: ts.Extension.Js,
            resolvedFileName,
            isExternalLibraryImport: customResolvedModule.isExternalLibraryImport,
        };
        return resolvedModule;
    }
    return resolveModuleNames;
}
